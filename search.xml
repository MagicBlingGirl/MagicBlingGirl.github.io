<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux系统编程（三）GDB调试入门</title>
      <link href="/2022/05/11/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89GDB%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/"/>
      <url>/2022/05/11/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89GDB%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="GDB调试器入门"><a href="#GDB调试器入门" class="headerlink" title="GDB调试器入门"></a>GDB调试器入门</h3><h4 id="GDB简介"><a href="#GDB简介" class="headerlink" title="GDB简介"></a>GDB简介</h4><p>GDB全称 “GNU symbolic debugger”，是Linux下常用的程序调试器，使用GDB调试器可以让程序按我们自定义的要求执行，例如在指定代码处暂停运行，查看当前的变量信息，单步调试，断点调试，设置变量等。</p><p>通过以下命令利用包管理器安装GDB调试器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum -y install gdb</span></span><br></pre></td></tr></table></figure><p>要使用GDB调试程序，需要在编译时添加调试选项，生成可调试的可执行文件，之后才可以进行GDB调试。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ main.cpp -o app -g</span><br></pre></td></tr></table></figure><h4 id="GDB命令"><a href="#GDB命令" class="headerlink" title="GDB命令"></a>GDB命令</h4><h5 id="启动，退出，查看代码"><a href="#启动，退出，查看代码" class="headerlink" title="启动，退出，查看代码"></a>启动，退出，查看代码</h5><ul><li>启动和退出<ul><li>gdb filename</li><li>quit</li></ul></li><li>设置和获取程序执行参数<ul><li>set args 10 20</li><li>show args</li></ul></li><li>GDB使用帮助<ul><li>help</li></ul></li><li>查看当前文件代码<ul><li>list （从默认位置显示）</li><li>list line_num（从指定行显示）</li><li>list fun_name（从指定函数显示）</li></ul></li><li>查看非当前文件代码<ul><li>list filename : line_num</li><li>list filename : fun_name</li></ul></li><li>设置显示的行数<ul><li>show listsize</li><li>set listsize</li></ul></li></ul><h5 id="断点操作"><a href="#断点操作" class="headerlink" title="断点操作"></a>断点操作</h5><ul><li>设置断点<ul><li>break line_num</li><li>break fun_name</li><li>break filename : line_num</li><li>break filename : fun_name</li></ul></li><li>查看断点<ul><li>info break</li></ul></li><li>删除断点<ul><li>delete break_num</li></ul></li><li>设置断点无效<ul><li>disable break_num</li></ul></li><li>设置断点生效<ul><li>enable break_num</li></ul></li><li>设置条件断点<ul><li>break 10 if i&#x3D;&#x3D;5</li></ul></li></ul><h5 id="调试命令"><a href="#调试命令" class="headerlink" title="调试命令"></a>调试命令</h5><ul><li>运行GDB程序<ul><li>start （程序停在第一行）</li><li>run （执行到第一个断点停止）</li></ul></li><li>继续运行直到下个断点<ul><li>continue</li></ul></li><li>向下执行一行（遇到函数不会进入函数体）<ul><li>next</li></ul></li><li>变量操作<ul><li>p</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux服务器开发 </category>
          
          <category> Linux系统编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> C++ </tag>
            
            <tag> GDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程（二）MakeFile入门</title>
      <link href="/2022/05/11/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89MakeFile%E5%85%A5%E9%97%A8/"/>
      <url>/2022/05/11/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89MakeFile%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="MakeFile的简单使用"><a href="#MakeFile的简单使用" class="headerlink" title="MakeFile的简单使用"></a>MakeFile的简单使用</h3><h4 id="什么是MakeFile？"><a href="#什么是MakeFile？" class="headerlink" title="什么是MakeFile？"></a>什么是MakeFile？</h4><p>一个工程中的源代码文件有很多，结构也很复杂，它们按照功能和模块放在若干不同的目录，如果一次次的使用gcc命令来编译是非常繁琐的。makefile制定了一系列规则，可以让用户定义哪些文件先编译，哪些文件后编译，哪些文件需要重新编译等等操作，它就像是编译工程的脚本文件。</p><h4 id="MakeFile的要素"><a href="#MakeFile的要素" class="headerlink" title="MakeFile的要素"></a>MakeFile的要素</h4><ul><li>命名：makefile，Makefile</li><li>目标：最终要生成的文件</li><li>依赖：生成目标文件所需的文件或目标</li><li>命令：通过执行命令对依赖操作生成目标</li></ul><h4 id="MakeFile语法"><a href="#MakeFile语法" class="headerlink" title="MakeFile语法"></a>MakeFile语法</h4><h5 id="MakeFile基础语法"><a href="#MakeFile基础语法" class="headerlink" title="MakeFile基础语法"></a>MakeFile基础语法</h5><p>下面是最简单的使用，将指定的若干源文件生成可执行文件app。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">app:sub.c add.c mult.c divide.c main.c</span></span><br><span class="line">    gcc sub.c add.c mult.c divide.c main.c -o app</span><br></pre></td></tr></table></figure><h5 id="MakeFile变量"><a href="#MakeFile变量" class="headerlink" title="MakeFile变量"></a>MakeFile变量</h5><p>Makefile允许用户定义变量，语法如下。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var = value</span><br></pre></td></tr></table></figure><p>Makefile内置了一些预定义变量，下面列出几个常用的预定义变量。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">AR: 归档维护程序的名称，默认 ar</span></span><br><span class="line"><span class="section">CC: C编译器的名称，默认 cc</span></span><br><span class="line"><span class="section">CXX: C++编译器名称，默认g++</span></span><br><span class="line"><span class="variable">$@</span>:目标的完整名称</span><br><span class="line"><span class="variable">$&lt;</span>：第一个依赖文件的名称</span><br><span class="line"><span class="variable">$^</span>: 所有的依赖文件</span><br><span class="line">$(变量名)：获取变量值</span><br></pre></td></tr></table></figure><h5 id="MakeFile函数"><a href="#MakeFile函数" class="headerlink" title="MakeFile函数"></a>MakeFile函数</h5><p>获取指定目录下指定类型的文件列表</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前目录以及./sub/目录下的.c文件</span></span><br><span class="line"><span class="variable">$(<span class="built_in">wildcard</span> *.c ./sub/*.c)</span></span><br></pre></td></tr></table></figure><p>模式字符串替换</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将x.c bar.c fuck.c替换为.o</span></span><br><span class="line"><span class="variable">$(<span class="built_in">patsubst</span> %.c, %.o, x.c bar.c fuck.c)</span></span><br></pre></td></tr></table></figure><p>删除文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除掉不需要的.o文件</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm <span class="variable">$(objs)</span> -f</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux服务器开发 </category>
          
          <category> Linux系统编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> C++ </tag>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程（一）GCC工作流程</title>
      <link href="/2022/05/11/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89GCC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/05/11/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89GCC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="GCC工作流程"><a href="#GCC工作流程" class="headerlink" title="GCC工作流程"></a>GCC工作流程</h3><h4 id="一、预处理（Preprocessing）"><a href="#一、预处理（Preprocessing）" class="headerlink" title="一、预处理（Preprocessing）"></a>一、预处理（Preprocessing）</h4><p>预处理器对源代码进行预处理操作，将头文件展开，处理注释，替换宏定义等。预处理后的源代码文件以 <strong>.i</strong> 结尾。</p><h4 id="二、编译（Compilation）"><a href="#二、编译（Compilation）" class="headerlink" title="二、编译（Compilation）"></a>二、编译（Compilation）</h4><p>编译器将预处理后的源代码进行词法，句法，语义分析，以及优化源代码等编译流程，生成以 <strong>.s</strong> 结尾的汇编代码。</p><h4 id="三、汇编（Assembly）"><a href="#三、汇编（Assembly）" class="headerlink" title="三、汇编（Assembly）"></a>三、汇编（Assembly）</h4><p>汇编代码通过汇编器生成目标二进制机器码，以 <strong>.o</strong> 结尾。</p><h4 id="四、链接"><a href="#四、链接" class="headerlink" title="四、链接"></a>四、链接</h4><p>一个项目通常不只有用户编写的源代码，还有其他目标代码，库代码等，链接器将这些代码进行链接生成最终的可执行程序。</p><p><img src="https://s2.loli.net/2022/05/11/QuJ9bRmwSvIVdBK.png"></p><center>图1 gcc工作流程</center><h3 id="gcc编译常用参数"><a href="#gcc编译常用参数" class="headerlink" title="gcc编译常用参数"></a>gcc编译常用参数</h3><ul><li>-E：预处理指定的源文件，不编译</li><li>-S：编译指定源文件，不汇编</li><li>-c：编译，汇编指定的源文件，不链接</li><li>file1 -o file2：将file1编译成可执行文件file2</li><li>-I directory：指定include包含文件的搜索目录</li><li>-g：编译时生成调试信息</li><li>-D：编译时指定一个宏</li><li>-w：不生成警告信息</li><li>-l：指定使用的库</li><li>-fpic：生成与位置无关的代码</li><li>-shared：生成共享目标文件</li></ul><h3 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h3><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><h5 id="Linux：libxxx-a"><a href="#Linux：libxxx-a" class="headerlink" title="Linux：libxxx.a"></a>Linux：libxxx.a</h5><ul><li>lib：前缀</li><li>xxx：库名称</li><li>.a：后缀</li></ul><h5 id="Windows：libxxx-lib"><a href="#Windows：libxxx-lib" class="headerlink" title="Windows：libxxx.lib"></a>Windows：libxxx.lib</h5><h4 id="静态库制作"><a href="#静态库制作" class="headerlink" title="静态库制作"></a>静态库制作</h4><ol><li>gcc获得 .o 文件</li><li>将 .o 文件打包，使用ar工具（archive）</li><li>gcc -c xxx1.c xxx2.c …… xxxn.c</li><li>ar rcs libxxx.a xxx1.o xxx2.o ……. xxxn.o</li></ol><h3 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h3><h4 id="命名规则-1"><a href="#命名规则-1" class="headerlink" title="命名规则"></a>命名规则</h4><h5 id="Linux：libxxx-so"><a href="#Linux：libxxx-so" class="headerlink" title="Linux：libxxx.so"></a>Linux：libxxx.so</h5><ul><li>lib：前缀</li><li>xxx：库名称</li><li>.so：后缀</li></ul><h5 id="Windows：libxxx-dll"><a href="#Windows：libxxx-dll" class="headerlink" title="Windows：libxxx.dll"></a>Windows：libxxx.dll</h5><h4 id="动态库制作"><a href="#动态库制作" class="headerlink" title="动态库制作"></a>动态库制作</h4><ol><li><p>gcc得到 .o 文件， 得到和位置无关的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -fpic a.c b.c</span><br></pre></td></tr></table></figure></li><li><p>gcc得到动态库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared a.o b.o -o libcalc.so</span><br></pre></td></tr></table></figure></li><li><p>添加动态库绝对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久添加，在/etc/profile文件末尾添加下行，然后<span class="built_in">source</span> /etc/profile</span></span><br><span class="line">export LD_LIARARY_PATH=$LD_LIBRARY_PATH:/mypath</span><br><span class="line">echo $LD_LIARARY_PATH</span><br></pre></td></tr></table></figure><h3 id="静态库和动态库对比"><a href="#静态库和动态库对比" class="headerlink" title="静态库和动态库对比"></a>静态库和动态库对比</h3><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><ul><li>静态库：GCC链接时将静态库的代码打包到可执行程序中。</li><li>动态库：GCC链接时不会打包到可执行程序中。</li><li>程序启动后，动态库会被动态加载到内存，通过ldd（list dynamic dependencies）命令检查动态库的依赖关系。</li></ul><h4 id="静态库的特点"><a href="#静态库的特点" class="headerlink" title="静态库的特点"></a>静态库的特点</h4><h5 id="静态库优点："><a href="#静态库优点：" class="headerlink" title="静态库优点："></a>静态库优点：</h5><p>静态库打包到程序中，加载快。</p><p>发布程序无需提供静态库，好移植。</p><h5 id="静态库缺点："><a href="#静态库缺点：" class="headerlink" title="静态库缺点："></a>静态库缺点：</h5><p>消耗系统资源，浪费内存。</p><p>更新部署和发布比较麻烦。</p><h4 id="动态库的特点："><a href="#动态库的特点：" class="headerlink" title="动态库的特点："></a>动态库的特点：</h4><h5 id="动态库优点："><a href="#动态库优点：" class="headerlink" title="动态库优点："></a>动态库优点：</h5><p>可以实现进程间资源共享（共享库）。</p><p>更新部署发布简单。</p><p>可以控制动态库加载的时机。</p><h5 id="动态库缺点："><a href="#动态库缺点：" class="headerlink" title="动态库缺点："></a>动态库缺点：</h5><p>加载速度较慢。</p><p>发布程序时需要提供依赖的动态库。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux服务器开发 </category>
          
          <category> Linux系统编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2022/05/11/%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/05/11/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/05/11/%E6%B5%8B%E8%AF%95/heisi.jpg" alt="heisi"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何在hexo上创建一篇文章</title>
      <link href="/2022/05/11/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2022/05/11/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h4><p>使用命令新建文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>new：文章创建命令</p><p>layout：文章布局，默认post，可以不填</p><p>title：文章标题兼文件名</p><p>文件存储路径为：source&#x2F;_posts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;如何在hexo上创建一篇文章&quot;</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: ~\Desktop\Programing\notes\MyBlog\source\_posts\如何在hexo上创建一篇文章.md</span><br></pre></td></tr></table></figure><p>如上使用命令创建一篇名为“如何在hexo上创建一篇文章”的文章</p><h4 id="Front-matter设置"><a href="#Front-matter设置" class="headerlink" title="Front-matter设置"></a>Front-matter设置</h4><p>Front-matter是指定文章属性变量的一块区域</p><p><img src="/2022/05/11/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/1.png" alt="1"></p><p>下表为一些预定义的参数</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td>无</td></tr><tr><td>title</td><td>标题</td><td>无</td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启评论</td><td>true</td></tr><tr><td>tags</td><td>标签</td><td></td></tr><tr><td>categories</td><td>分类</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td>无</td></tr></tbody></table><p>设置好开头的变量以后便可以使用typora等编辑器编写文章，写好的文章通过命令部署后即可完成上传。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/10/hello-world/"/>
      <url>/2022/05/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
