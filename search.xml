<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>并发服务器设计（一）IO多路复用</title>
      <link href="/2022/05/18/%E5%B9%B6%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
      <url>/2022/05/18/%E5%B9%B6%E5%8F%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/0629-1.png"></p><span id="more"></span><h3 id="何为IO模型"><a href="#何为IO模型" class="headerlink" title="何为IO模型"></a>何为IO模型</h3><h4 id="什么是网络IO"><a href="#什么是网络IO" class="headerlink" title="什么是网络IO"></a>什么是网络IO</h4><p>想必大家对磁盘IO都非常熟悉，要在Linux系统读取文件，要通过open获取一个文件描述符fd，然后调用read和write系统调用来进行读写，最后调用close把fd关闭掉。这就是磁盘IO的基本过程。其中I意味着Input，也就是read，O意味着Output，也就是write。那么IO的对象就是你目标的文件，在Linux中你通过文件描述符的方式对这个文件进行操作。</p><p>网络IO和磁盘IO的过程实际上是类似的，只不过这个fd变成了socket，open的过程变成了网络连接建立的过程。网络IO就是向网络上的目标进行发送和接受数据的过程。在Linux中由于一切皆文件，socket也被抽象为一个文件，我们通过socket fd来进行网络数据的传输。</p><h4 id="网络IO的过程"><a href="#网络IO的过程" class="headerlink" title="网络IO的过程"></a>网络IO的过程</h4><p>接下来简单介绍网络IO的流程，以TCP为例，在建立连接时发起方通过connect函数，接收方通过accept函数各自获得了用于socket通信的fd，连接正式建立，接下来通信双方就可以通过read和write系统调用来进行数据收发了。</p><p>在Linux内核中维护了发送缓冲区和接收缓冲区，我们本质上是通过fd对这两块缓冲区进行读写，假设用户A要向用户B发送一条消息，实际上是做了下面的步骤：</p><ol><li>用户A将消息封包，通过write调用将消息发到TCP发送缓冲区</li><li>消息从发送缓冲区发出，通过网络到达用户B的TCP接收缓冲区</li><li>用户B通过read调用从TCP接收缓冲区读取消息数据，并将消息解包</li></ol><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/%E7%BD%91%E7%BB%9Cio%E6%B5%81%E7%A8%8B.png" alt="TCP网络传输流程"></p><h4 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h4><p>在得知网络IO的流程之后，接收数据时要调用read从接收缓冲区中读取数据。那么现在有一个问题，应用之间并非时时刻刻都在发送消息，那么当应用向接收缓冲区read时，此时接收缓冲区没有数据可读的话，该怎么办呢？或者当应用向发送缓冲区write时，发送缓冲区已经满了，该怎么办呢？是将函数直接返回还是持续等待？对这件事的处理态度就阻塞IO和非阻塞IO的区别了。</p><p><strong>阻塞IO</strong>就是在用户发出IO请求后，如果数据没有就绪，则会进入阻塞态，交出处理器，当数据就绪时再接触阻塞，以read为例，如果当前缓冲区没有数据可读，线程会持续阻塞在read直到缓冲区有数据为止。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ret = <span class="built_in">read</span>(fd, &amp;buf, len);</span><br></pre></td></tr></table></figure><p><strong>非阻塞IO</strong>在用户发出IO请求后，可以直接得到一个返回结果，如果返回值是一个错误标识，则用户可以得知数据没有就绪，于是用户可以继续不断的循环尝试read，直到数据就绪为止，也就是说，非阻塞IO需要不断的去询问是否就绪，持续占用处理器。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">read</span>(fd, &amp;buf, len);</span><br><span class="line">    <span class="keyword">if</span>(ret != errno)&#123;</span><br><span class="line">        <span class="built_in">Process</span>(&amp;buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IO多路复用技术"><a href="#IO多路复用技术" class="headerlink" title="IO多路复用技术"></a>IO多路复用技术</h3><h4 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h4><p>网络通信有时并非一对一的关系，对于服务器程序而言，同一时间可能会有N多个客户端发起请求并等待客户端响应，在这种并发场景下，一种很自然的想法是使用多线程，以保证并发场景下能够快速的让客户端收到响应。</p><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/%E7%AE%80%E5%8D%95%E5%A4%9A%E7%BA%BF%E7%A8%8BIO.png"></p><p>这样看似解决了问题，当然如果你的服务器并发量非常小，比如只有十几个或者几十个，为每个连接单独分配一个线程是勉强可以接受的，但如果你的服务器有时会同时接受几十万数量级的并发，那么你要一次创建几十万个线程，这显然不太现实，而且一般情况下，大量并发的连接中，活跃的连接数是远小于总数的，这就会导致大量的线程资源被浪费，它们本可以去做其他事，却不得不一直等待IO，这显然不是一个很好的设计。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>如何实现更高效的利用线程资源的同时，满足客户端的响应速度，这就是IO多路复用解决的问题。</p><p>IO多路复用的基本思路是只用一个线程来管理多个网络IO流。具体的实现方式是主线程使用一个IO复用器来筛选IO就绪的连接，然后为这些就绪的连接去分配线程进行处理。这样我们可以暂且忽略那些大部分不活跃的连接，集中为活跃连接服务，大大减少了线程资源的浪费。IO复用器的作用就是在所有的连接（fd）中筛选出读写事件就绪的连接（fd），因此暂且称它为Selector。</p><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8.png"></p><p>Selector的实现其实就是我们所熟知的select，poll，epoll这些IO复用技术了，它们是Linux系统提供的api，我们通过这些api来注册fd，并对fd们进行监听。</p><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><h5 id="select"><a href="#select" class="headerlink" title="select"></a>select</h5><h5 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h5><h5 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h5>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux服务器开发 </category>
          
          <category> 网络并发服务器设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO多路复用 </tag>
            
            <tag> epoll </tag>
            
            <tag> 服务器开发 </tag>
            
            <tag> Linux网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux网络编程：使用socket进行网络通信</title>
      <link href="/2022/05/18/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BD%BF%E7%94%A8socket%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
      <url>/2022/05/18/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%9A%E4%BD%BF%E7%94%A8socket%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/blog/0516-06%20%282%29.png"></p><span id="more"></span><h3 id="Socket编程基础"><a href="#Socket编程基础" class="headerlink" title="Socket编程基础"></a>Socket编程基础</h3><h4 id="何为Socket"><a href="#何为Socket" class="headerlink" title="何为Socket"></a>何为Socket</h4><p>所谓socket（套接字），就死对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议根进行交互的接口。</p><p>socket可以看成两个网络应用程序通信时，各自通信连接中的端点，这是个逻辑上的概念。它是网络环境中进程间通信的 API，也是可以被命名和寻址的通信端点，使用中的每一个套接字都有其类型和一个与之相关联的进程。通信时其中一个网络应用程序将要传输的一段信息写入它所在主机的 socket 中，该 socket 通过与网络接口卡（NIC）相连的传输介质将这段信息送到另外一台主机的 socket 中，使对方能够接收到这段信息。socket 是由 IP 地址和端口结合的，提供向应用层进程传送数据包的机制。</p><p>socket 本身有“插座”的意思，在 Linux 环境下，用于表示进程间网络通信的特殊文件类型。本质为内核借助缓冲区形成的伪文件。既然是文件，那么理所当然的，我们可以使用文件描述符引用套接字。与管道类似的，Linux 系统将其封装成文件的目的是为了统一接口，使得读写套接字和读写文件的操作一致。区别是管道主要应用于本地进程间通信，而套接字多应用于网络进程间数据的传递。</p><h4 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h4><h5 id="什么是字节序？"><a href="#什么是字节序？" class="headerlink" title="什么是字节序？"></a>什么是字节序？</h5><p>现代cpu累加器一次能装载4字节（32位机），即一个整数，这4字节的排列顺序将影响其读取的数值。这就引起了通信领域的一个重要问题：通信双方交流的信息单元以什么样的顺序传输。如果通信双方信息单元顺序规则不一致，通信双方将无法正确的编码解码从而导致通信失败。字节序顾名思义，即字节的顺序，就是字节在内存中的存放顺序。字节序分为大端字节序和小端字节序。</p><p><strong>大端字节序：</strong>高位字节存在低地址，低位字节存在高地址。</p><p><strong>小端字节序：</strong>高位字节存在高地址，低位字节存在低地址。</p><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/%E5%9B%BE%E8%A7%A3/%E5%AD%97%E8%8A%82%E5%BA%8F.png"></p><h5 id="字节序转换函数"><a href="#字节序转换函数" class="headerlink" title="字节序转换函数"></a>字节序转换函数</h5><p>当格式化的数据在两台字节序不同的主机间传输，必然会导致数据的解释错误，解决方案是发送端总是把发送数据转换成大端字节序，接收端根据自身的字节序判断是否转换。</p><p>网络字节序是TCP&#x2F;IP中规定好的一种数据表示方式，与CPU和操作系统类型无关，从而保证数据在不同主机之间的数据传输能够正确被解释。网络字节序采用大端字节序。BSD Socket提供了封装好的转换接口。包括从主机字节序到网络字节序的转换函数：htonl，htonl，ntohs，ntohl。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//h - host 主机字节序</span></span><br><span class="line"><span class="comment">//to - 转换成什么</span></span><br><span class="line"><span class="comment">//n - network 网络字节序</span></span><br><span class="line"><span class="comment">//s - short unsigned short</span></span><br><span class="line"><span class="comment">//l - long unsigned int</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换端口（端口号16位,short）</span></span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">htons</span><span class="params">(<span class="type">uint16_t</span> hostshort)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">ntohs</span><span class="params">(<span class="type">uint16_t</span> netshort)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换IP地址（IP是32位）</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">htonl</span><span class="params">(<span class="type">uint32_t</span> hostlong)</span>;</span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">ntohl</span><span class="params">(<span class="type">uint32_t</span> netlong)</span>;</span><br></pre></td></tr></table></figure><h4 id="Socket地址"><a href="#Socket地址" class="headerlink" title="Socket地址"></a>Socket地址</h4><p>socket地址是一个结构体，封装了端口号和IP等信息，socket相关API会用到socket地址。</p><h5 id="通用Socket地址"><a href="#通用Socket地址" class="headerlink" title="通用Socket地址"></a>通用Socket地址</h5><p>socket网络编程接口中表示socket地址的是结构体sockaddr，其定义为如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/socket.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span>&#123;</span></span><br><span class="line">    <span class="type">sa_family_t</span> sa_family;</span><br><span class="line">    <span class="type">char</span> sa_data[<span class="number">14</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">short</span> <span class="type">int</span> <span class="type">sa_family_t</span>;</span><br></pre></td></tr></table></figure><p>sa_family成员是地址族类型（sa_family_t）的变量，地址族类型与协议族类型对应。协议族和地址族的宏都定义在<strong>bits&#x2F;socket.h</strong>头文件中，且后者与前者的值相同，所以二者可以混用。sa_data成员存放socket的地址值，但是不同的协议族地址值具有不同的含义和长度。</p><table><thead><tr><th align="left">协议族</th><th align="left">地址族</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">PF_UNIX</td><td align="left">AF_UNIX</td><td align="left">UNIX本地域协议族</td></tr><tr><td align="left">PF_INET</td><td align="left">AF_INET</td><td align="left">IPV4协议族</td></tr><tr><td align="left">PF_INET6</td><td align="left">AF_INET6</td><td align="left">IPV6协议族</td></tr></tbody></table><table><thead><tr><th>协议族</th><th align="left">地址含义和长度</th></tr></thead><tbody><tr><td>PF_UNIX</td><td align="left">文件路径名，长度可达108字节</td></tr><tr><td>PF_INET</td><td align="left">16位端口号和32位IPV4地址，共6字节</td></tr><tr><td>PF_INET6</td><td align="left">16位端口号，32位比特流表示，128位IPV6地址，32位比特范围ID，共26字节</td></tr></tbody></table><h5 id="专用Socket地址"><a href="#专用Socket地址" class="headerlink" title="专用Socket地址"></a>专用Socket地址</h5><p>很多网络编程函数诞生早于IPV4协议，那时候用的都是sockaddr结构体，为了向前兼容，sockaddr退化成了void*的作用，传递一个地址给函数，至于该地址是sockaddr_in还是sockaddr_in6，由地址族决定，然后函数内部再强制转化为所需类型。</p><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/%E5%9B%BE%E8%A7%A3/socket%E5%9C%B0%E5%9D%80.png"></p><h6 id="Unix本地协议族："><a href="#Unix本地协议族：" class="headerlink" title="Unix本地协议族："></a>Unix本地协议族：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/un.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span>&#123;</span></span><br><span class="line">    <span class="type">sa_family_t</span> sin_family;</span><br><span class="line">    <span class="type">char</span> sun_path[<span class="number">108</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="TCP-x2F-IP协议族："><a href="#TCP-x2F-IP协议族：" class="headerlink" title="TCP&#x2F;IP协议族："></a>TCP&#x2F;IP协议族：</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span>&#123;</span></span><br><span class="line">    <span class="type">in_addr_t</span> s_addr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于IPv4</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>&#123;</span></span><br><span class="line">    <span class="type">sa_family_t</span> sin_family;</span><br><span class="line">    <span class="type">in_port_t</span> sin_port;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> sin_zero[<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr) - __SOCKADDR_COMMON_SIZE - <span class="keyword">sizeof</span>(<span class="type">in_port_t</span>) - <span class="keyword">sizeof</span>(<span class="keyword">struct</span> in_addr)];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于IPv6</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in6</span>&#123;</span></span><br><span class="line">    <span class="type">sa_family_t</span> sin6_family;</span><br><span class="line">    <span class="type">in_port_t</span> sin6_port;</span><br><span class="line">    <span class="type">uint32_t</span> in6_addr sin6_addr;</span><br><span class="line">    <span class="type">uint32_t</span> sin6_scope_id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">short</span> <span class="type">unit16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="type">uint32_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint16_t</span> <span class="type">in_port_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint32_t</span> <span class="type">in_addr_t</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SOCKADDR_COMMON_SIZE(sizeof(unsigned short int));</span></span><br></pre></td></tr></table></figure><p>所有专用socket地址类型的变量在实际使用中都需要转化为通用socket地址类型，因为所有socket编程接口使用的地址参数都是sockaddr。</p><h4 id="IP地址转换"><a href="#IP地址转换" class="headerlink" title="IP地址转换"></a>IP地址转换</h4><p>人们习惯用可读性好的字符串表示IP地址，例如点分十进制，点分十六进制，但编程中需要转化为整数才能使用，而记录日志时则相反，需要把整数表示的IP地址转化为可读的字符串。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="comment">// 新，且支持ipv6</span></span><br><span class="line"><span class="comment">// p：点分十进制IP字符串，n：网络字节序整数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 点分十进制IP字符串转换为网络字节序整数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">inet_pton</span><span class="params">(<span class="type">int</span> af, <span class="type">const</span> <span class="type">char</span>* src, <span class="type">void</span>* dst)</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- af：地址族，AF_INET, AF_INET6</span></span><br><span class="line"><span class="comment">- src：点分十进制IP字符串</span></span><br><span class="line"><span class="comment">- dst：转换后的结果（传出参数）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 网络字节序整数转换为点分十进制IP字符串</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="title function_">inet_ntop</span><span class="params">(<span class="type">int</span> af, <span class="type">const</span> <span class="type">void</span> *src, <span class="type">char</span>* dst, <span class="type">socklen_t</span> size)</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- af：地址族，AF_INET, AF_INET6</span></span><br><span class="line"><span class="comment">- src：IP整数地址</span></span><br><span class="line"><span class="comment">- dst：传出参数，转换后的字符串</span></span><br><span class="line"><span class="comment">- size：第三个参数的大小（字符串长度）</span></span><br><span class="line"><span class="comment">返回值：转换后的数据地址，和dst相同</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="传输层网络通信"><a href="#传输层网络通信" class="headerlink" title="传输层网络通信"></a>传输层网络通信</h3><h4 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h4><p>TCP：传输控制协议，面向连接，可靠协议，面向字节流传输，仅支持单播。</p><p>UDP：用户数据报协议，支持单播，多播，广播，面向数据报传输，不可靠协议（无连接，无数据备份，不关心数据是否到达。</p><table><thead><tr><th align="left">UDP</th><th align="left">TCP</th></tr></thead><tbody><tr><td align="left">无连接</td><td align="left">面向连接</td></tr><tr><td align="left">不可靠</td><td align="left">可靠</td></tr><tr><td align="left">一对一，一对多，多对一，多对多</td><td align="left">仅一对一</td></tr><tr><td align="left">面向数据报</td><td align="left">面向字节流</td></tr><tr><td align="left">首部8字节</td><td align="left">首部最少20字节</td></tr><tr><td align="left">实时应用</td><td align="left">可靠性要求高的应用</td></tr></tbody></table><h4 id="TCP通信流程"><a href="#TCP通信流程" class="headerlink" title="TCP通信流程"></a>TCP通信流程</h4><p><strong>TCP服务器端：</strong></p><ol><li>创建一个监听socket。</li><li>将这个监听socket和本地IP和端口号绑定。</li><li>设置监听，监听的socket开始工作。</li><li>阻塞等待，当有客户端发起连接时解除阻塞，接受客户端连接，会得到一个和客户端通信的socket。</li><li>开始数据通信（发送和接受数据）。</li><li>通信结束，断开连接。</li></ol><p><strong>TCP客户端：</strong></p><ol><li>创建一个用于通信的socket。</li><li>连接服务器，需要指定连接的服务器的IP和端口号。</li><li>连接成功，客户端可以直接和服务器通信。</li><li>通信结束，断开连接。</li></ol><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/%E5%9B%BE%E8%A7%A3/socket%E6%B5%81%E7%A8%8B.png"></p><h4 id="Socket-API"><a href="#Socket-API" class="headerlink" title="Socket API"></a>Socket API</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建套接字，return监听的socket fd</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">socket</span><span class="params">(<span class="type">int</span> domain, <span class="type">int</span> type, <span class="type">int</span> protocol)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将socket和本地IP，端口号绑定</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">bind</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> addrlen)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听这个socket上的连接</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">listen</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> backlog)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接受客户端连接，默认阻塞，阻塞等待客户端连接，return用于通信的socket fd</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">accept</span><span class="params">(<span class="type">int</span> sockfd, <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> *addrlen)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端连接服务器</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">connect</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="keyword">struct</span> sockaddr *addr, <span class="type">socklen_t</span> addrlen)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据读写，读写成功返回读写的字节数</span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span>* buf, <span class="type">size_t</span> count)</span>;</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span>* buf, <span class="type">size_t</span> count)</span>;</span><br></pre></td></tr></table></figure><h4 id="TCP通信原理"><a href="#TCP通信原理" class="headerlink" title="TCP通信原理"></a>TCP通信原理</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里先不讲，后续再对TCP做一个比较详细的知识点梳理</span></span><br></pre></td></tr></table></figure><h4 id="TIME-WAIT"><a href="#TIME-WAIT" class="headerlink" title="TIME_WAIT"></a>TIME_WAIT</h4><p>当TCP两节主动关闭方接受到被动关闭方发送的FIN和最终ACK后，连接的主动关闭方必须处于TIME_WAIT状态并持续2MSL时间。这样就能让TCP连接的主动关闭方在它发送的ACK丢失的情况下重新发送最终ACK。主动关闭方重新发送的最终ACK并不是因为被动关闭方重传了ACK，而是因为被动关闭方重传了它的FIN。事实上被动关闭方总是重传FIN直到它收到一个最终的ACK。</p><h4 id="半关闭"><a href="#半关闭" class="headerlink" title="半关闭"></a>半关闭</h4><p>当TCP连接中A向B发送FIN请求关闭，另一端B回应ACK后（即A端进入FIN_WAIT2状态）并没有立即发送FIN给A，A方处于半连接状态，此时A可以接受B发送的数据，但A已经不能向B发送数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 程序接口实现半关闭</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">shutdown</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> how)</span>;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    sockfd：需要关闭的socket fd</span></span><br><span class="line"><span class="comment">   how：shutdown的方式，有以下三个可选项</span></span><br><span class="line"><span class="comment">SHUT_RD：关闭读功能</span></span><br><span class="line"><span class="comment">SHUT_WR：关闭写功能</span></span><br><span class="line"><span class="comment">SHUT_RDWR：读写都关闭</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>使用close终止一个连接，但它只是减少描述符的引用计数，并不直接关闭连接，只有当描述符的引用计数为0时次关闭连接，shutdown不考虑描述符的引用计数，直接关闭描述符，也可选择终止一方向的连接，只终止读或写。</p><ul><li>如果多个进程共享一个套接字，close每被调用一次，计数-1，直到计数为0，套接字被释放。</li><li>在多进程中如果一个进程调用了shutdown(sfd, SHUT_RDWR)后，其他进程都将无法进行通信，但如果一个进程调用close，则不会影响其他进程。</li></ul><h4 id="端口复用"><a href="#端口复用" class="headerlink" title="端口复用"></a>端口复用</h4><p>端口复用的意义是防止在服务器重启时之前绑定的端口还未释放，以及程序突然退出而没有释放端口等情况下出现无法使用端口的现象。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/type.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="comment">// 设置套接字属性（不仅是端口复用）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">setsockopt</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> level, <span class="type">int</span> optname, <span class="type">const</span> <span class="type">void</span>* optval, <span class="type">socklen_t</span> optlen)</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">level：级别- SOL_SOCKET(端口复用的级别)</span></span><br><span class="line"><span class="comment">optname：</span></span><br><span class="line"><span class="comment">- SO_REUSEADDR;</span></span><br><span class="line"><span class="comment">- SO_REUSEPORT;</span></span><br><span class="line"><span class="comment">optval: 1可以复用，0不可复用</span></span><br><span class="line"><span class="comment">optlen：optval参数大小</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 端口复用设置在服务器绑定端口之前</span></span><br></pre></td></tr></table></figure><h4 id="UDP通信"><a href="#UDP通信" class="headerlink" title="UDP通信"></a>UDP通信</h4><p>UDP由于不需要握手建立连接，因此通信流程的编写相对TCP更为简单直接。</p><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/%E5%9B%BE%E8%A7%A3/UDP%E6%B5%81%E7%A8%8B.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys.socket.h&gt;</span></span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">sendto</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">const</span> <span class="type">void</span>* buf, <span class="type">size_t</span> len, <span class="type">int</span> flags, <span class="type">const</span> <span class="keyword">struct</span> sockaddr* dest_addr, <span class="type">socklen_t</span> addrlen)</span>;</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">recvfrom</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">void</span>* buf, <span class="type">size_t</span> len, <span class="type">int</span> flags, <span class="keyword">struct</span> sockaddr* src_addr, <span class="type">socklen_t</span> *addrlen)</span>;</span><br></pre></td></tr></table></figure><h5 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h5><p>向子网中所有的计算机发送消息，每个广播消息包含一个特殊IP地址（广播地址），该地址子网内主机标志位全部为1。广播只能在局域网使用，并且客户端需要绑定服务器广播的端口。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用setsockopt函数设置广播属性</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">setsockopt</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> level, <span class="type">int</span> optname, <span class="type">const</span> <span class="type">void</span>* optval, <span class="type">socklen_t</span> optlen)</span>;</span><br><span class="line">level = SOL_SOCKET;</span><br><span class="line">optname = SO_BROADCAST;</span><br><span class="line">optval = <span class="number">1</span>;</span><br><span class="line">optlen = <span class="keyword">sizeof</span>(optval);</span><br></pre></td></tr></table></figure><h5 id="多播（组播）"><a href="#多播（组播）" class="headerlink" title="多播（组播）"></a>多播（组播）</h5><p>单播地址标识单个IP接口，广播地址表示某个子网的所有IP接口，多播地址标识一组IP接口。多播数据包仅对它感兴趣的接口接受。广播局限于局域网，而多播可以用在局域网，也可以用在广域网。客户端若想收到多播数据，需要先加入多播组。</p><p>IP多播通信必须依赖IP多播地址，在IPV4中，多播地址范围从：224.0.0.0 ~ 239.255.255.255，并且被分为局部链接多播地址，预留多播地址，管理权限多播地址三类。</p><table><thead><tr><th>IP地址</th><th>说明</th></tr></thead><tbody><tr><td>224.0.0.0~224.0.0.255</td><td>局部链接多播地址：为路由协议和其他用途保留的地址，路由器不转发属于此范围的IP包。</td></tr><tr><td>224.0.1.0~224.0.1.255</td><td>预留多播地址：共用组播地址，可用于Internet，使用前需要申请。</td></tr><tr><td>224.0.2.0~238.255.255.255</td><td>预留多播地址：用户可用组播地址，全网范围有效</td></tr><tr><td>239.0.0.0~239.255.255.255</td><td>本地管理组播地址，可供组织内部使用，类似私有IP，不能用于Internet，可限制组播范围</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用setsockopt函数设置组播属性</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">setsockopt</span><span class="params">(<span class="type">int</span> sockfd, <span class="type">int</span> level, <span class="type">int</span> optname, <span class="type">const</span> <span class="type">void</span>* optval, <span class="type">socklen_t</span> optlen)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器设置多播信息，外出接口</span></span><br><span class="line">level = IPPROTO_IP;</span><br><span class="line">optname = IP_MULTICAST_IF;</span><br><span class="line">optval = <span class="keyword">struct</span> in_addr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端加入到多播组</span></span><br><span class="line">level = IPPROTO_IP;</span><br><span class="line">optname = IP_ADD_MEMBERSHIP;</span><br><span class="line">optval = <span class="keyword">struct</span> ip_mreq;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上述两结构体的数据结构如下</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip_mreq</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">imr_multiaddr</span>;</span> <span class="comment">// 多播地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">imr_interface</span>;</span> <span class="comment">// 本地IP</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint32_t</span> <span class="type">in_addr_t</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span>&#123;</span></span><br><span class="line">    <span class="type">in_addr_t</span> s_addr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux服务器开发 </category>
          
          <category> 网络并发服务器设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 网络编程 </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程（八）多线程编程</title>
      <link href="/2022/05/17/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E5%85%AB%EF%BC%89%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/05/17/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E5%85%AB%EF%BC%89%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/blog/0516-01.png"></p><span id="more"></span><h3 id="Linux多线程编程"><a href="#Linux多线程编程" class="headerlink" title="Linux多线程编程"></a>Linux多线程编程</h3><h4 id="线程概述"><a href="#线程概述" class="headerlink" title="线程概述"></a>线程概述</h4><p>线程是允许应用程序并发执行的一种机制，一个进程可以包含多个线程，同一程序中所有线程均会独立执行相同程序，并且共用同一份全局内存区域，包括：初始化数据段，未初始化数据段，以及堆内存段。进程是CPU资源分配的基本单位，线程是操作系统调度执行的基本单位，线程是轻量级进程，在Linux下线程的本质仍是进程。</p><h5 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h5><ul><li>进程间信息难以共享，由于除去只读代码段外，父子进程并未共享内存，因此必须采用一些进程通信方式，在进程间进行信息交换。</li><li>调用fork()创建进程的代价相对较高，即便利用写时复制技术，仍然需要复制诸如内存页表和文件描述符等多种进程属性，这意味着fork()调用在时间上的开销依然不菲。</li><li>线程之间能够方便快速的共享信息，只需要将数据复制到共享（全局或堆）变量中即可。</li><li>创建线程比创建进程要快10倍甚至更多，线程间是共享虚拟地址空间的，无需采用写时复制来复制内存，也无需复制页表。</li><li>每个线程共享虚拟地址空间，但是有各自对应的栈空间，以及各自的代码段。</li></ul><h5 id="线程间的共享资源和非共享资源"><a href="#线程间的共享资源和非共享资源" class="headerlink" title="线程间的共享资源和非共享资源"></a>线程间的共享资源和非共享资源</h5><h6 id="线程间的共享资源："><a href="#线程间的共享资源：" class="headerlink" title="线程间的共享资源："></a>线程间的共享资源：</h6><ul><li>进程ID和父进程ID</li><li>进程组ID和会话ID</li><li>用户ID和用户组ID</li><li>文件描述符表</li><li>信号处置</li><li>文件系统相关信息：文件权限掩码umask，当前工作目录</li><li>虚拟地址空间（除了栈，.text）</li></ul><h6 id="线程间的非共享资源："><a href="#线程间的非共享资源：" class="headerlink" title="线程间的非共享资源："></a>线程间的非共享资源：</h6><ul><li>线程ID</li><li>信号掩码</li><li>线程特有数据</li><li>error变量</li><li>实时调度策略和优先级</li><li>栈，本地变量和函数的调用链接信息</li></ul><h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><p>线程的优势在于能够通过全局变量共享信息，但这样的便携性是有代价的，必须确保多个线程不会同时修改同一变量，或者某一线程不会读取正在由其他线程修改的变量。线程同步的含义为：当有一个线程在对内存操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成，其他线程才能对该地址进行操作，否则其他线程处于等待状态。</p><h5 id="互斥量"><a href="#互斥量" class="headerlink" title="互斥量"></a>互斥量</h5><p>为了避免线程更新共享变量时出现问题，可以使用互斥量（mutex）机制来确保同时仅有一个线程可以访问资源。使用互斥量可以保证对任意共享内存的原子访问。</p><p>互斥量有两种状态，已锁定（locked）和未锁定（unlocked），任何时候最多只有一个线程可以锁定该互斥量，试图对已经锁定的某个互斥量再次加锁，可能导致线程阻塞或报错，具体取决于加锁方法。一旦线程锁定互斥量，随即成为该互斥量的所有者，只有所有者才能给互斥量解锁，一般情况下，对每一个共享资源会使用不同的互斥量，每个线程在访问同一资源时将采用如下协议：</p><ul><li>针对共享资源锁定互斥量</li><li>访问共享资源</li><li>对互斥量解锁</li></ul><p>如果多个线程试图执行临界区代码，事实上只有一个线程能够持有互斥量，其他线程将遭到阻塞。</p><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><p>有时，一个线程需要同时访问两个或多个共享资源，而每个资源又由不同的互斥量管理，当超过一个线程加锁同一组互斥量时，就可能发生死锁。两个或两个以上的进程在执行过程中，因争夺共享资源而造成的一种互相等待现象，若无外力作用，他们将都无法继续推进，此时称为系统处于死锁状态。</p><h6 id="死锁产生的条件："><a href="#死锁产生的条件：" class="headerlink" title="死锁产生的条件："></a>死锁产生的条件：</h6><p>死锁将在以下条件全部满足时出现：</p><ul><li><p>互斥</p><p>临界资源是独占资源，进程应互斥且排他的使用这些资源。</p></li><li><p>占有和等待条件</p><p>进程在请求资源得不到满足而等待时，不释放已占有资源。</p></li><li><p>不剥夺条件</p><p>又称不可抢占，已获资源只能由进程自愿释放，不允许被其他进程剥夺。</p></li><li><p>循环等待条件</p><p>又称环路条件，存在循环等待链，其中，每个进程都在等待链中等待下一个进程所持有的资源，造成这组进程处于永远等待状态。</p></li></ul><h6 id="死锁产生的原因："><a href="#死锁产生的原因：" class="headerlink" title="死锁产生的原因："></a>死锁产生的原因：</h6><ul><li>进程顺序不当</li><li>PV操作使用不妥</li><li>同类资源分配不均</li><li>对某些资源的使用未加限制</li></ul><p>产生死锁的原因不仅与系统拥有的资源数量有关，而且与资源分配策略、进程对资源的使用要求以及进程的推进顺序有关。</p><h6 id="防止死锁的方法："><a href="#防止死锁的方法：" class="headerlink" title="防止死锁的方法："></a>防止死锁的方法：</h6><p>防止死锁即在程序运行前防止死锁的发生，也就是破坏死锁的4条件中的至少一项。</p><p><strong>破坏互斥条件：</strong></p><p>使资源同时访问而非互斥使用，就没有进程会阻塞在资源上，从而不发生死锁。对只读文件可以采用此方法，但对于可写文件以及输入设备等，只能互斥占有，因而该方法在大多数场景下并不适用。</p><p><strong>破坏占有和等待条件：</strong></p><p>采用静态分配的方式，静态分配的方式是指进程必须在执行之前就申请需要的全部资源，且直至所要的资源全部得到满足后才开始执行。该方法实现简单，但是严重降低资源利用率。因为一个进程的某些资源在运行后期才会使用，有些资源在特殊情况下才会使用，该方法会导致进程占用一些几乎用不到的资源，从而使其他想要使用这些资源的进程等待。</p><p><strong>破坏不剥夺条件：</strong></p><p>剥夺调度能够防止死锁，但是只适用于内存和处理器资源。</p><p>方法一：占有资源的进程若要申请新资源，必须主动释放已占有资源，若需要此资源，应该向系统重新申请。</p><p>方法二：资源分配管理程序为进程分配新资源时，若有则分配；否则将剥夺此进程已占有的全部资源，并让进程进入等待资源状态，资源充足后再唤醒它重新申请所有所需资源。</p><p><strong>破坏循环等待条件：</strong></p><p>给系统的所有资源编号，规定进程请求所需资源的顺序必须按照资源的编号依次进行。</p><ul><li>一个进程得到某层的一个资源后，只能申请较高一层的资源。</li><li>当进程释放某层的一个资源时，必须先释放所占有的较高层的资源。</li><li>当进程获得某层的一个资源时，如果想申请同层的另一个资源，必须先释放此层中已占有的资源。</li></ul><h6 id="死锁避免的方法："><a href="#死锁避免的方法：" class="headerlink" title="死锁避免的方法："></a>死锁避免的方法：</h6><p>在程序运行时避免发生死锁：<strong>银行家算法</strong></p><h5 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h5><p>当有一个线程已经持有互斥锁时，互斥锁将所有试图进入临界区的线程都阻塞，但是考虑一种情况，当前持有互斥锁的线程只是要读资源，而同时有其他几个线程也想读取该资源，但是由于互斥锁的特性，其他线程都无法获取锁，也就无法对共享资源进行读操作，但实际上多个线程同时对资源进行读访问并不会出现问题。</p><p>在对数据的读写操作中，读操作通常多余写操作，例如对数据库数据的读写应用。因此为了满足当前能够允许多个线程读，但只允许一个线程写，出现了读写锁机制。</p><h6 id="读写锁的特点："><a href="#读写锁的特点：" class="headerlink" title="读写锁的特点："></a>读写锁的特点：</h6><ul><li>如果有其他线程读数据，则允许其他线程读，但不允许写。</li><li>如果有其他线程写，则其他线程读写均不允许。</li><li>写时独占的，写的优先级更高。</li></ul><h4 id="Linux线程库"><a href="#Linux线程库" class="headerlink" title="Linux线程库"></a>Linux线程库</h4><h5 id="线程操作相关函数"><a href="#线程操作相关函数" class="headerlink" title="线程操作相关函数"></a>线程操作相关函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pthread_create</span><span class="params">(<span class="type">pthread_t</span> *thread, <span class="type">const</span> <span class="type">pthread_attr_t</span> *attr, <span class="type">void</span>*(*start_routine)(<span class="type">void</span>*), <span class="type">void</span> *arg)</span>;</span><br><span class="line"><span class="type">pthread_t</span> <span class="title function_">pthread_self</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_equal</span><span class="params">(<span class="type">pthread_t</span> t1, <span class="type">pthread_t</span> t2)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pthread_exit</span><span class="params">(<span class="type">void</span> *retval)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_join</span><span class="params">(<span class="type">pthread_t</span> thread, <span class="type">void</span> **retval)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_detach</span><span class="params">(<span class="type">pthread_t</span> thread)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cancel</span><span class="params">(<span class="type">pthread_t</span> thread)</span>;</span><br></pre></td></tr></table></figure><h5 id="线程属性相关函数"><a href="#线程属性相关函数" class="headerlink" title="线程属性相关函数"></a>线程属性相关函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程属性类型 pthread_attr_t</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_init</span><span class="params">(<span class="type">pthread_attr_t</span> *attr)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_destory</span><span class="params">(<span class="type">pthread_attr_t</span> *attr)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_getdetachstate</span><span class="params">(<span class="type">const</span> <span class="type">pthread_attr_t</span> <span class="type">int</span> *detachstate)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_attr_setdetachstate</span><span class="params">(<span class="type">pthread_attr_t</span> *attr, <span class="type">int</span> detachstate)</span>;</span><br></pre></td></tr></table></figure><h5 id="互斥量相关函数"><a href="#互斥量相关函数" class="headerlink" title="互斥量相关函数"></a>互斥量相关函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 互斥量类型：pthread_mutex_t</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_init</span><span class="params">(<span class="type">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex, <span class="type">const</span> <span class="type">pthread_mutexattr_t</span> *<span class="keyword">restrict</span> attr)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_destroy</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_trylock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_unlock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br></pre></td></tr></table></figure><h5 id="读写锁相关函数"><a href="#读写锁相关函数" class="headerlink" title="读写锁相关函数"></a>读写锁相关函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读写锁类型：pthread_rwlock_t</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_rwlock_init</span><span class="params">(<span class="type">pthread_rwlock_t</span> *<span class="keyword">restrict</span> rwlock, <span class="type">const</span> <span class="type">pthread_rwlockattr_t</span> *<span class="keyword">restrict</span> attr)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_rwlock_destroy</span><span class="params">(<span class="type">pthread_rwlock_t</span> *rwlock)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_rwlock_rdlock</span><span class="params">(<span class="type">pthread_rwlock_t</span> *rwlock)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_rwlock_tryrdlock</span><span class="params">(<span class="type">pthread_rwlock_t</span> *rwlock)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_rwlock_wrlock</span><span class="params">(<span class="type">pthread_rwlock_t</span> *rwlock)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_rwlock_trywrlock</span><span class="params">(<span class="type">pthread_rwlock_t</span> *rwlock)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_rwlock_unlock</span><span class="params">(<span class="type">pthread_rwlock_t</span> *rwlock)</span>;</span><br></pre></td></tr></table></figure><h5 id="条件变量相关函数"><a href="#条件变量相关函数" class="headerlink" title="条件变量相关函数"></a>条件变量相关函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件变量类型：pthread_cond_t</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_init</span><span class="params">(<span class="type">pthread_cond_t</span> *<span class="keyword">restrict</span> cond, <span class="type">const</span> <span class="type">pthread_condattr_t</span> *<span class="keyword">restrict</span> attr)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_destroy</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span>;</span><br><span class="line"><span class="comment">// 阻塞函数，等待唤醒</span></span><br><span class="line"><span class="comment">// wait阻塞时，对mutex解锁</span></span><br><span class="line"><span class="comment">// wait收到信号接触阻塞时，对mutex加锁</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_wait</span><span class="params">(<span class="type">pthread_cond_t</span> *<span class="keyword">restrict</span> cond, <span class="type">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_timewait</span><span class="params">(<span class="type">pthread_cond_t</span> *<span class="keyword">restrict</span> cond, <span class="type">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex, <span class="type">const</span> <span class="keyword">struct</span> timespec *<span class="keyword">restrict</span> abstime)</span>;<span class="comment">// 等待一定时间，阻塞到时间到结束</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_signal</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span>; <span class="comment">// 唤醒一个或者多个等待的线程</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_broadcast</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span>; <span class="comment">// 唤醒所有等待的线程</span></span><br></pre></td></tr></table></figure><h5 id="信号量相关函数"><a href="#信号量相关函数" class="headerlink" title="信号量相关函数"></a>信号量相关函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 信号量类型：sem_t</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_init</span><span class="params">(<span class="type">sem_t</span> *sem, <span class="type">int</span> pshared, <span class="type">unsigned</span> <span class="type">int</span> value)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_destroy</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_wait</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;<span class="comment">// 信号量 -1</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_trywait</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_timedwait</span><span class="params">(<span class="type">sem_t</span> *sem, <span class="type">const</span> <span class="keyword">struct</span> timespec *abs_timeout)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_post</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;<span class="comment">// 信号量 +1</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_getvalue</span><span class="params">(<span class="type">sem_t</span> *sem, <span class="type">int</span> *sval)</span>;<span class="comment">// 获取信号量数据值</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux服务器开发 </category>
          
          <category> Linux系统编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程（七）进程组，会话，守护进程</title>
      <link href="/2022/05/16/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%83%EF%BC%89%E8%BF%9B%E7%A8%8B%E7%BB%84%EF%BC%8C%E4%BC%9A%E8%AF%9D%EF%BC%8C%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
      <url>/2022/05/16/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%83%EF%BC%89%E8%BF%9B%E7%A8%8B%E7%BB%84%EF%BC%8C%E4%BC%9A%E8%AF%9D%EF%BC%8C%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/blog/0516-03.png"></p><span id="more"></span><h3 id="进程组，会话，守护进程"><a href="#进程组，会话，守护进程" class="headerlink" title="进程组，会话，守护进程"></a>进程组，会话，守护进程</h3><h4 id="进程组和会话"><a href="#进程组和会话" class="headerlink" title="进程组和会话"></a>进程组和会话</h4><p>在Unix系统中，用户通过终端登录系统后得到一个shell进程，这个终端成为shell进程的控制终端（Controlling Terminal），进程中，控制终端是保存在PCB中的信息，而fork函数会复制PCB中的信息，因此由shell进程启动的其他进程的控制终端也是这个终端。</p><p>默认情况下（无重定向），每个进程的<strong>标准输入</strong>，<strong>标准输出</strong>，<strong>标准错误输出</strong>，都指向控制终端，进程从标准输入读也就是读用户的键盘输入，进程往标准输出或者标准错误输出写，也就是输出到显示器上。在控制终端输入一些特殊的控制键可以给前台进程发送信号，例如Ctrl+C会产生SIGINT信号，Ctrl+\会产生SIGQUIT信号。</p><h5 id="进程组"><a href="#进程组" class="headerlink" title="进程组"></a>进程组</h5><p>进程组和会话在进程之间形成了一种两级层次关系：进程组是一组相关进程的集合，会话是一组相关进程组的集合，进程组和会话是为了支持shell作业控制而定义的抽象概念，用户通过shell能够交互式的在前台或后台运行命令。</p><p>进程组由一个或多个共享同一进程组标识符（PGID）的进程组成。一个进程组拥有一个进程组首进程，该进程是创建该组的进程，其进程ID为该进程组的组ID，新进程会继承其父进程所属的进程组ID。</p><p>进程组拥有一个生命周期，其开始时间为首进程创建进程组的时刻，结束时间为最后一个成员退出进程组的时刻，一个进程可能会因为终止而退出进程组，也可能因为加入了另外的进程组而退出进程组，进程组首进程无需是最后一个离开进程组的成员。</p><h5 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h5><p>会话是一组进程组的集合。会话首进程是创建该会话的进程，其进程ID会成为会话ID，新进程会继承其父进程的会话ID。一个会话中所有进程共享单个控制终端，控制终端会在会话首进程首次打开一个终端设备时被建立，一个终端最多可能会成为一个会话的控制终端。</p><p>在任一时刻，会话中的其中一个进程组会成为终端的前台进程组，其他进程组会成为后台进程组，只有前台进程组中的进程才能从控制终端读取输入，当用户在控制终端中输入终端字符生成信号后，该信号会被发送到前台进程组中的所有成员。当控制终端的连接建立后，会话首进程会成为该终端的控制进程。</p><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/%E5%9B%BE%E8%A7%A3/%E8%BF%9B%E7%A8%8B%E7%BB%84%E4%BC%9A%E8%AF%9D%E7%BB%88%E7%AB%AF%E4%B8%89%E8%80%85%E5%85%B3%E7%B3%BB.png"></p><h5 id="进程组与会话相关函数"><a href="#进程组与会话相关函数" class="headerlink" title="进程组与会话相关函数"></a>进程组与会话相关函数</h5><p>由于通过函数名和参数名可以简单得知函数的功能和参数的含义，因此不额外添加文字介绍。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pid_t</span> <span class="title function_">getpgrp</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pid_t</span> <span class="title function_">getpgid</span><span class="params">(<span class="type">pid_t</span> pid)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">setpgid</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">pid_t</span> pgid)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pid_t</span> <span class="title function_">getsid</span><span class="params">(<span class="type">pit_t</span> pid)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pid_t</span> <span class="title function_">setsid</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><h4 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h4><p>守护进程（Daemon Process），也就是Daemon进程，是Linux中的后台服务进程，它是生存期较长的进程，通常独立于控制终端并且周期性的执行某种任务，或者等待处理某些发生的时间，名字一般以d结尾。Linux的大多数服务器就是用守护进程实现的，例如Internet服务器inetd，Web服务器httpd等。</p><h5 id="守护进程的特点"><a href="#守护进程的特点" class="headerlink" title="守护进程的特点"></a>守护进程的特点</h5><ul><li>生命周期很长，守护进程会在系统启动时被创建并且一直运行直到系统被关闭。</li><li>它在后台运行并且不拥有控制终端，没有控制终端确保了内核永远不会为守护进程自动生成任何控制信号以及终端相关的信号。</li></ul><h5 id="守护进程的创建步骤"><a href="#守护进程的创建步骤" class="headerlink" title="守护进程的创建步骤"></a>守护进程的创建步骤</h5><ul><li>执行一个fork()，之后父进程退出，子进程继续执行。</li><li>子进程调用setsid()开启新会话。（新的会话会脱离原控制终端）</li><li>清除进程的umask以确保当守护进程创建文件和目录时拥有所需的权限。</li><li>修改进程的当前工作目录，通常会改为根目录（&#x2F;）。</li><li>关闭守护进程从其父进程继承而来的所有打开着的文件描述符。</li><li>在关闭了文件描述符0，1，2之后，守护进程通常会打开&#x2F;dev&#x2F;null，并使用dup2()使所有这些描述符指向这个设备。</li><li>执行核心业务逻辑</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux服务器开发 </category>
          
          <category> Linux系统编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 进程 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程（六）进程间通信</title>
      <link href="/2022/05/13/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E5%85%AD%EF%BC%89%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/2022/05/13/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E5%85%AD%EF%BC%89%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/blog/0513-03%20%282%29.png"></p><span id="more"></span><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><h4 id="进程通信的概念"><a href="#进程通信的概念" class="headerlink" title="进程通信的概念"></a>进程通信的概念</h4><p>进程是独立的资源分配单元，不同进程其资源是独立的，没有关联。但进程与进程时常需要进行数据交换，因此需要进程间通信IPC。</p><p><strong>进程间通信的目的：</strong></p><ul><li><p>数据传输：一个进程需要将它的数据发送给另一进程</p></li><li><p>通知事件：一个进程需要向另一个或一组进程发送消息，通知它们发生了某种事件（进程终止时要通知父进程）</p><!--more--></li><li><p>资源共享：多个进程之间共享同样的资源，为了做到这一点需要内核提供互斥和同步机制</p></li><li><p>进程控制：有些进程希望完全控制另一个进程的执行（GDB），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变</p></li></ul><p>在同主机间进程通信的方式有管道，信号，内存映射，共享内存等。不同主机间进程通信（即网络通信）主要使用socket。下面的小节对以上几种进程通信方式分别做介绍。</p><h4 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h4><h5 id="管道通信的概念和原理"><a href="#管道通信的概念和原理" class="headerlink" title="管道通信的概念和原理"></a>管道通信的概念和原理</h5><p>管道是Unix系统进程通信的最古老形式，所有Unix系统都支持这种通信机制。下图为 ls | wc -l 的执行原理，其中ls和wc为两个进程，wc进程需要ls进程的数据。| 为管道符，ls向管道写数据，wc从管道读数据。</p><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/%E5%9B%BE%E8%A7%A3/%E7%AE%A1%E9%81%93.png"></p><ul><li>管道其实是一个在内核内存中维护的缓冲器，这个缓冲器的存储能力是有限的，不同OS大小不一定相同。</li><li>管道拥有文件的特性：读，写，管道两端有各自的文件描述符fd，匿名管道没有文件实体，有名管道存在文件实体，但不存储数据，可以按照操作文件的方式操作管道。</li><li>一个管道是一个字节流，使用管道时不存在消息或者消息边界的概念，从管道读取数据的进程可以读取任意大小的数据块，而不管写入进程写入管道的数据量是多少。</li><li>通过管道传递的数据是顺序的，从管道中读取出来的字节的顺序和他们被写入管道的顺序是完全相同的。</li><li>管道的数据的传递方向是单向的，一端用于写入，一段用于读取，管道是半双工的。</li><li>从管道读数据是一次性操作，数据一旦被独读走，就从管道中被抛弃，释放空间以便写入更多数据，在管道中无法使用lseek()随机访问数据。</li><li>匿名管道只能在具有公共祖先的进程（父子进程，兄弟进程等）使用，因为fork出的进程共享文件描述符</li></ul><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/%E5%9B%BE%E8%A7%A3/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E7%AE%A1%E9%81%93.png"></p><h5 id="管道读写的方式"><a href="#管道读写的方式" class="headerlink" title="管道读写的方式"></a>管道读写的方式</h5><p>在读管道时，若管道中有数据，read返回实际读到的字节数。若管道中无数据，如果写端全部关闭，read返回0，如果写端没有完全关闭，read阻塞等待。</p><p>在写管道时，若管道读端全部关闭，进程异常终止。若管道读端没有完全关闭，若管道满，write阻塞，若管道没满，write写入数据，返回实际写入的字节数。</p><h5 id="匿名管道"><a href="#匿名管道" class="headerlink" title="匿名管道"></a>匿名管道</h5><p>使用匿名管道（只能用于有亲缘关系的进程）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pipe</span><span class="params">(<span class="type">int</span> pipefd[<span class="number">2</span>])</span>;</span><br></pre></td></tr></table></figure><p>查看管道缓冲区大小的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ulimit -a</span><br></pre></td></tr></table></figure><p>查看管道缓冲区大小的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">fpathconf</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> name)</span>;</span><br></pre></td></tr></table></figure><h5 id="有名管道"><a href="#有名管道" class="headerlink" title="有名管道"></a>有名管道</h5><p>有名管道FIFO，提供了一个路径名与之关联，也就是说，有文件实体，其打开方式和文件一样。因此即使是不相关的两个进程也可以通过它来通信。</p><p>一旦打开了FIFO就能在它上面使用与操作匿名管道和其他文件系统调用一样的函数（read，write，close），FIFO也有读端和写端，并且从管道中读取数据的顺序和写入的顺序一样。</p><p>通过命令创建有名管道：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfifo [fifo_name]</span><br></pre></td></tr></table></figure><p>通过函数创建有名管道：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">mkfifo</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* pathname, <span class="type">mode_t</span> mode)</span>;</span><br></pre></td></tr></table></figure><ul><li>一旦使用mkfifo创建了一个FIFO，就可以使用open打开它，常见的文件IO函数都可以用于FIFO。</li><li>FIFO严格遵循先入先出，对管道及FIFO的读总是从开始处返回数据，对他们的写则是把数据添加到末尾，不支持lseek等文件随机定位函数。</li><li>一个为只读而打开的管道进程会阻塞，直到另外一个进程为写数据打开管道。</li><li>一个为只写打开管道的进程会阻塞，直到另外一个进程为读数据打开管道。</li></ul><h6 id="有名管道区别于匿名管道的地方"><a href="#有名管道区别于匿名管道的地方" class="headerlink" title="有名管道区别于匿名管道的地方"></a>有名管道区别于匿名管道的地方</h6><ul><li>FIFO在文件系统中作为一个特殊文件存在，但FIFO中的内容却放在内存中。</li><li>当使用FIFO的进程退出后，FIFO文件将继续保存在文件系统中以便以后使用。</li><li>FIFO有名字，不相关的两个进程也可以通过打开有名管道通信。</li></ul><h4 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a>内存映射</h4><h5 id="内存映射的概念和使用"><a href="#内存映射的概念和使用" class="headerlink" title="内存映射的概念和使用"></a>内存映射的概念和使用</h5><p>内存映射是将磁盘文件的数据映射到内存，用户通过修改内存就能修改磁盘文件。</p><p>创建内存映射：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">mmap</span><span class="params">(<span class="type">void</span>* addr, <span class="type">size_t</span> length, <span class="type">int</span> prot, <span class="type">int</span> flags, <span class="type">int</span> fd, <span class="type">off_t</span> offset)</span>;</span><br></pre></td></tr></table></figure><p>释放内存映射：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">munmap</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> length)</span>;</span><br></pre></td></tr></table></figure><h5 id="内存映射tips"><a href="#内存映射tips" class="headerlink" title="内存映射tips"></a>内存映射tips</h5><ul><li>如果对mmap的返回值进行（ptr++），munmap是否能够成功？<ul><li>答：可以ptr++，但是要先保存首地址否则unmap不正确。</li></ul></li><li>如果open时O_RDONLY，mmap时prot参数指定PROT_READ | PROT_WRITE会如何？<ul><li>答：会返回MAP_FAILED，prot的权限应当小于等于open时的权限。</li></ul></li><li>文件偏移量为1000时会怎样？<ul><li>答：偏移量必须为4K整数倍，因此会返回MAP_FAILED（4K为linux的页面大小）</li></ul></li><li>mmap什么情况下会调用失败？<ul><li>length&lt;&#x3D;0</li><li>prot没指定读权限</li><li>prot权限大于了open时指定的权限</li><li>offset不是1024的整数倍</li></ul></li><li>可以在open的时候O_CREAT一个新文件来创建映射区吗？<ul><li>答：可以，但创建文件的大小为0则不行，因此要对新文件的大小进行扩展（lseek or truncate）</li></ul></li><li>mmap后关闭文件描述符，对mmap映射有什么影响？<ul><li>答：不会，映射区依然存在</li></ul></li><li>对ptr越界操作会如何？<ul><li>答：非法内存，发生段错误</li></ul></li></ul><h4 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h4><p>信号是事件发生时对进程的通知机制，也称为软件中断，它是软件层次上对中断机制的一种模拟，是一种异步通信方式。信号可以导致一个正在运行的进程被另一个正在运行的进程被另一个正在运行的异步进程中断，转而去处理某一个突发事件。发往进程的诸多信号通常源于内核。</p><h5 id="发送信号的情况"><a href="#发送信号的情况" class="headerlink" title="发送信号的情况"></a>发送信号的情况</h5><ul><li>对于前台进程，用户可以通过输入特殊的终端字符来对进程发送信号。例如ctrl+C。</li><li>硬件发生异常，即硬件检测到一个错误条件并且通知内核，内核随即发送相应信号给进程。</li><li>系统状态变化，例如alarm定时器到期将引起SIGALRM信号。</li><li>运行kill命令或者调用kill函数。</li></ul><h5 id="使用信号的目的："><a href="#使用信号的目的：" class="headerlink" title="使用信号的目的："></a>使用信号的目的：</h5><ul><li>让进程知道已经发生了一个特定的事件。</li><li>强迫进程执行它代码中的信号处理程序。</li></ul><h5 id="信号的默认处理动作"><a href="#信号的默认处理动作" class="headerlink" title="信号的默认处理动作"></a>信号的默认处理动作</h5><ul><li>Term 终止进程</li><li>Ign 当前进程忽略掉这个信号</li><li>Core 终止进程，并生成一个Core文件</li><li>Stop 暂停当前进程</li><li>Cont 继续执行被暂停的进程</li></ul><p>SIGKILL和SIGSTOP不能被捕捉，阻塞或者忽略，只能执行默认动作。</p><h5 id="信号相关函数"><a href="#信号相关函数" class="headerlink" title="信号相关函数"></a>信号相关函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">kill</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> sig)</span>;</span><br></pre></td></tr></table></figure><ul><li>功能：向任何进程pid发送任何sig信号</li><li>参数：<ul><li>pid：<ul><li>pid &gt; 0：发送给指定进程</li><li>pid &#x3D;&#x3D; 0：发送给当前进程</li><li>pid &#x3D;&#x3D; -1：发送给每一个有权限接受这个信号的进程</li><li>pid &lt; -1：向pid的进程组发送信号</li></ul></li><li>sig：要发送的信号 sig&#x3D;&#x3D;0不发送任何信号</li></ul></li><li>返回值：0成功，非0失败</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">raise</span><span class="params">(<span class="type">int</span> sig)</span>;</span><br></pre></td></tr></table></figure><ul><li>功能：给当前进程发送信号</li><li>参数：<ul><li>sig：要发送的信号</li></ul></li><li>返回值：0成功，非0失败</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">abort</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li>功能：给当前进程发送SIGABRT信号</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">alarm</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seconds)</span>;</span><br></pre></td></tr></table></figure><ul><li>功能：设置定时器。函数调用开始倒计时，当倒计时为0的时候函数会给当前进程发送一个SIGALARM信号。</li><li>参数：<ul><li>seconds：倒计时时长，参数为0则定时器无效。</li></ul></li><li>返回值：之前有定时器，则返回上个定时器剩余时间，之前没有定时器，则返回0。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">setitimer</span><span class="params">(<span class="type">int</span> which, <span class="type">const</span> <span class="keyword">struct</span> itimerval *new_value, <span class="keyword">struct</span> itimerval *old_value)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时器结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">itimerval</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">it_interval</span>;</span> <span class="comment">// 间隔时间</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">it_value</span>;</span> <span class="comment">// 延迟多久时间执行定时器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 时间结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span>&#123;</span></span><br><span class="line">    <span class="type">time_t</span> tv_sec; <span class="comment">// 秒</span></span><br><span class="line">    <span class="type">suseconds_t</span> tv_usec; <span class="comment">// 微秒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>功能：设置定时器，可以替代alarm函数，精度更高（us），可以实现周期性定时。</li><li>参数：<ul><li>which：指定选用哪种类型的时间<ul><li>ITIMER_REAL：真实时间，发送SIGALARM。</li><li>ITIMER_VIRTUAL：用户时间，发送SIGVTALRM。</li><li>ITIMER_PROF：该进程在用户态和内核态下的时间计算，发送SIGPROF。</li></ul></li><li>new_value：设置定时器属性。</li><li>old_value：记录上一次定时的时间参数，一般指定nullptr。</li></ul></li><li>返回值：成功0，失败-1</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">sighandler_t</span> <span class="title function_">signal</span><span class="params">(<span class="type">int</span> signum, <span class="type">sighandler_t</span> handler)</span>;</span><br></pre></td></tr></table></figure><ul><li>功能：设置某个信号的捕捉行为</li><li>参数：<ul><li>signum：要捕捉的信号值</li><li>handler：信号处理方式<ul><li>SIG_IGN：忽略信号</li><li>SIG_DFL：使用信号默认行为</li><li>回调函数：用自定义函数处理，由内核调用，程序员只负责编写。</li></ul></li></ul></li><li>返回值：<ul><li>成功：返回上一次注册的信号处理函数的地址，第一次调用返回nullptr。</li><li>失败：返回 SIG_ERR，设置错误号。</li></ul></li><li>ps：SIGKILL 和 SIGSTOP不能被捕捉或忽略</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sigaction</span><span class="params">(<span class="type">int</span> signum, <span class="type">const</span> <span class="keyword">struct</span> sigaction *act, <span class="keyword">struct</span> sigaction *oldact)</span>;</span><br></pre></td></tr></table></figure><ul><li>功能：检查或者改变信号的处理，信号捕捉</li><li>参数：<ul><li>signum：要捕捉的信号值</li><li>act：捕捉到信号后的处理动作（回调函数）</li><li>oldact：上一次对信号捕捉的相关设置，一般为nullptr。</li></ul></li><li>返回值：成功0，失败-1。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> &#123;</span></span><br><span class="line">    <span class="type">void</span> (*sa_handler)(<span class="type">int</span>);</span><br><span class="line">    <span class="type">void</span> (*sa_sigaction)(<span class="type">int</span>, <span class="type">siginfo_t</span> *, <span class="type">void</span> *);</span><br><span class="line">    <span class="type">sigset_t</span> sa_mask;</span><br><span class="line">    <span class="type">int</span> sa_flags;</span><br><span class="line">    <span class="type">void</span> (*sa_restorer)(<span class="type">void</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>sa_handler：此参数和signal()的参数handler相同，代表新的信号处理函数。</li><li>sa_mask：用来设置在处理该信号时暂时将sa_mask 指定的信号集搁置。</li><li>sa_flags：用来设置信号处理的其他相关操作，有以下几个可选值<ul><li>SA_RESETHAND：当调用信号处理函数时，将信号的处理函数重置为缺省值SIG_DFL。</li><li>SA_RESTART：如果信号中断了进程的某个系统调用，则系统自动启动该系统调用。</li><li>SA_NODEFER ：一般情况下， 当信号处理函数运行时，内核将阻塞该给定信号。但是如果设置了 SA_NODEFER标记， 那么在该信号处理函数运行时，内核将不会阻塞该信号。</li></ul></li></ul><h5 id="信号集"><a href="#信号集" class="headerlink" title="信号集"></a>信号集</h5><p>多个信号可使用一个称为信号集的数据结构表示，在PCB中有两个重要的信号集：阻塞信号集，未决信号集。这两个信号集都是内核使用位图机制来实现的。但操作系统不允许我们直接对这两个信号集进行位操作，而需要自定义另一个集合，借助信号集操作函数来对PCB中这两个信号集进行修改。</p><p>信号的未决是一种状态：信号产生到信号被处理前的这段时间。信号的阻塞是一个开关动作，指的是信号被处理，但是不阻止信号产生。</p><p>信号的阻塞是让系统暂时保留信号待以后发送，由于另外有办法让系统忽略信号，所以一般情况下信号的阻塞只是暂时的，只是为了防止信号打断敏感操作。</p><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/%E5%9B%BE%E8%A7%A3/%E4%BF%A1%E5%8F%B7%E9%9B%86.png"></p><h5 id="信号集相关函数"><a href="#信号集相关函数" class="headerlink" title="信号集相关函数"></a>信号集相关函数</h5><p>清空信号集数据，将所有标志位清0：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sigemptyset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>)</span>;</span><br></pre></td></tr></table></figure><p>将信号集所有位置1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sigfillset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>)</span>;</span><br></pre></td></tr></table></figure><p>添加阻塞位，将信号值signum对应的位置1，表示阻塞该信号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sigaddset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">int</span> signum)</span>;</span><br></pre></td></tr></table></figure><p>删除阻塞位，将信号值signum对应的位置0，表示不阻塞该信号：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sigdelset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">int</span> signum)</span>;</span><br></pre></td></tr></table></figure><p>判断某个信号是否为1（是否阻塞）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sigismember</span><span class="params">(<span class="type">const</span> <span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">int</span> signum)</span>; <span class="comment">//返回1阻塞，返回0不阻塞</span></span><br></pre></td></tr></table></figure><p>设置阻塞信号集：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sigprocmask</span><span class="params">(<span class="type">int</span> how, <span class="type">const</span> <span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">sigset_t</span> *oldset)</span>;</span><br><span class="line"><span class="comment">// 其中how参数有如下可选项</span></span><br><span class="line"><span class="comment">// SIG_BLOCK：将用户设置的阻塞信号集添加到内核，内核原来的数据不变</span></span><br><span class="line"><span class="comment">// SIG_UNBLOCK：根据用户设置的数据，对内核中的信号集接触阻塞</span></span><br><span class="line"><span class="comment">// SIG_SETMASK：覆盖内核的阻塞信号集</span></span><br></pre></td></tr></table></figure><p>获取内核中的未决信号集：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sigpending</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>)</span>;</span><br></pre></td></tr></table></figure><h5 id="内核实现信号捕捉的流程"><a href="#内核实现信号捕捉的流程" class="headerlink" title="内核实现信号捕捉的流程"></a>内核实现信号捕捉的流程</h5><ol><li>主程序因为某条指令因为中断，异常，或系统调用进入内核。</li><li>内核处理完异常准备会用户态前先处理当前进程中可以递送的信号：do_signal()</li><li>如果信号处理动作为用户自定义的信号处理函数，则回到用户态执行信号处理函数。</li><li>信号处理函数返回时执行特殊的系统调用：sys_sigreturn()</li><li>返回用户态从主程序中上次被中断的地方继续执行</li><li><strong>sigaction执行信号处理时会有临时阻塞信号集，信号处理完毕后恢复为内核区信号集</strong></li><li><strong>当执行信号处理程序时，该信号会被自动阻塞（系统行为）</strong></li><li><strong>信号被阻塞时，新来的信号被直接丢弃，不支持排队，也不支持记录信号个数（因为实现机制是位图机制）</strong></li></ol><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/%E5%9B%BE%E8%A7%A3/%E5%86%85%E6%A0%B8%E5%AE%9E%E7%8E%B0%E4%BF%A1%E5%8F%B7%E6%8D%95%E6%8D%89%E7%9A%84%E8%BF%87%E7%A8%8B.png"></p><h5 id="SIGCHLD信号"><a href="#SIGCHLD信号" class="headerlink" title="SIGCHLD信号"></a>SIGCHLD信号</h5><p><strong>产生条件：</strong></p><ul><li>子进程终止时。</li><li>子进程接受到SIGSTOP信号停止时。</li><li>子进程处在停止态，接受到SIGCONT后唤醒时。</li><li>以上三种条件都会给父进程发送SIGCHILD信号，父进程默认忽略该信号。</li></ul><h4 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h4><p>共享内存允许两个或者多个进程共享物理内存的同一块区域（通常称为段），由于一个共享内存段会成为一个进程用户空间的一部分，因此共享内存机制无需内核介入，所有需要做的就是让一个进程将数据复制进共享内存中，并且这部分数据会对其他所有共享同一个段的进程可用。与管道相比，共享内存速度更快，但是会存在进程同步问题。</p><h5 id="共享内存的使用"><a href="#共享内存的使用" class="headerlink" title="共享内存的使用"></a>共享内存的使用</h5><ul><li>调用shmget()创建一个新共享内存段或者取得一个现有的共享内存段标识符，该函数返回目标共享内存标识符。</li><li>调用shmat()附上共享内存段，使得这个段成为调用进程虚拟内存的一部分。</li><li>此时程序中可以像使用其他可用内存一样使用共享内存段，为引用该内存段，需要shmat()返回的addr值，它是虚拟空间中该共享内存段的起点指针。</li><li>调用shmdt()分离共享内存段，调用该函数后，进程无法再引用该共享内存，这一步可选，进程终止时会自动完成这一步。</li><li>调用shmctl()来删除共享内存段，只有当前所有附加内存段的进程都与之分离后，内存段才会被销毁，只有一个进程需要执行这一步。</li></ul><h5 id="共享内存相关函数"><a href="#共享内存相关函数" class="headerlink" title="共享内存相关函数"></a>共享内存相关函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">shmget</span><span class="params">(<span class="type">key_t</span> key, <span class="type">size_t</span> size, <span class="type">int</span> shmflg)</span>;</span><br></pre></td></tr></table></figure><ul><li>功能：创建一个新的共享内存段，或者获取一个现有的共享内存段标识符，新创建的内存段中的数据都初始化为0。</li><li>参数：<ul><li>key：key_t是一个整形，通过这个找到或者创建一个内存共享，一般用16进制表示，非0。</li><li>size：共享内存大小，为页面大小整数倍</li><li>shmflg：标志（访问权限或附加属性）<ul><li>IPC_CREAT：如果共享内存不存在，则创建一个共享内存，否则打开操作。</li><li>IPC_EXCL：只有在共享内存不存在的时候，新的共享内存才建立，否则就产生错误。</li></ul></li></ul></li><li>返回值：成功返回共享内存的标识符；不成功返回-1，errno储存错误原因。</li></ul><table><thead><tr><th align="center">标识符</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">EINVAL</td><td align="center">参数size小于SHMMIN或大于SHMMAX。</td></tr><tr><td align="center">EEXIST</td><td align="center">预建立key所致的共享内存，但已经存在。</td></tr><tr><td align="center">EIDRM</td><td align="center">参数key所致的共享内存已经删除。</td></tr><tr><td align="center">ENOSPC</td><td align="center">超过了系统允许建立的共享内存的最大值(SHMALL )。</td></tr><tr><td align="center">ENOENT</td><td align="center">参数key所指的共享内存不存在，参数shmflg也未设IPC_CREAT位。</td></tr><tr><td align="center">EACCES</td><td align="center">没有权限。</td></tr><tr><td align="center">ENOMEM</td><td align="center">核心内存不足。</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="title function_">shmat</span><span class="params">(<span class="type">int</span> shmid, <span class="type">const</span> <span class="type">void</span>* shmaddr, <span class="type">int</span> shmflg)</span>;</span><br></pre></td></tr></table></figure><ul><li>功能：将共享内存和当前进程关联。</li><li>参数：<ul><li>shimid：共享内存标识符，由shmget返回值获取。</li><li>shmaddr：申请的共享内存起始地址，指定nullptr由内核指定。</li><li>shmflg：对共享内存的操作。<ul><li>读：SHM_RDONLY，读权限是必须的。</li><li>读写：0。</li></ul></li></ul></li><li>返回值：返回共享内存首地址，失败(void*)-1。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">shmdt</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* shmaddr)</span>;</span><br></pre></td></tr></table></figure><ul><li>功能：解除当前进程和共享内存的关联</li><li>参数：<ul><li>shmaddr：共享内存首地址。</li></ul></li><li>返回值：成功0，失败-1。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">shmctl</span><span class="params">(<span class="type">int</span> shmid, <span class="type">int</span> cmd, <span class="keyword">struct</span> shmid_ds *buf)</span>;</span><br></pre></td></tr></table></figure><ul><li>功能：对共享内存进行操作，删除共享内存。共享内存要删除才能消失，创建。</li><li>参数：<ul><li>shmid：共享内存的ID。</li><li>cmd：要做的操作。<ul><li>IPC_STAT：获取共享内存当前状态。</li><li>IPC_SET：设置共享内存的状态。</li><li>IPC_RMID：标记共享内存被销毁。</li></ul></li><li>buf：需要设置或者获取的共享内存的属性信息。<ul><li>IPC_STAT：buf存储数据。</li><li>IPC_SET：buf中需要初始化数据，设置到内核中。</li><li>IPC_RMID：没用，nullptr。</li></ul></li></ul></li><li>返回值：成功0，失败-1。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">key_t</span> <span class="title function_">ftok</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* pathname, <span class="type">int</span> proj_id)</span>;</span><br></pre></td></tr></table></figure><ul><li>功能：根据指定路径名和int值，生成一个共享内存的key。</li><li>参数：<ul><li>pathname：指定一个存在的路径。</li><li>proj_id：int类型，但是这个系统调用只会使用其中一个字节。范围是0~255，一般指定一个字符’a’。</li></ul></li><li>返回值：生成的key。</li></ul><h5 id="共享内存有关的命令"><a href="#共享内存有关的命令" class="headerlink" title="共享内存有关的命令"></a>共享内存有关的命令</h5><h6 id="ipcs命令："><a href="#ipcs命令：" class="headerlink" title="ipcs命令："></a>ipcs命令：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipcs -a #打印当前系统中所有进程间通信方式信息</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipcs -m#打印使用共享内存进行进程通信的信息</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipcs -q#打印使用消息队列进行进程通信的信息</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipcs -s#打印使用信号进行进程间通信的信息</span><br></pre></td></tr></table></figure><h6 id="ipcrm命令："><a href="#ipcrm命令：" class="headerlink" title="ipcrm命令："></a>ipcrm命令：</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipcrm -M shmkey#移除用shmkey创建的共享内存段</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipcrm -m shmid#移除用shmid标识的共享内存段</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipcrm -Q msgkey#移除用msgkey创建的消息队列</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipcrm -q msqid#移除用msqid标识的消息队列</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipcrm -S semkey#移除用semkey创建的信号</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipcrm -s semid#移除用semid标识的信号</span><br></pre></td></tr></table></figure><h5 id="共享内存tips"><a href="#共享内存tips" class="headerlink" title="共享内存tips"></a>共享内存tips</h5><h6 id="操作系统如何知道一块共享内存被多少进程关联？"><a href="#操作系统如何知道一块共享内存被多少进程关联？" class="headerlink" title="操作系统如何知道一块共享内存被多少进程关联？"></a>操作系统如何知道一块共享内存被多少进程关联？</h6><p>共享内存维护了一个结构体<strong>struct shmid_ds</strong>，该结构体有一个成员<strong>shm_nattch</strong>，<strong>shm_nattch</strong>记录了关联的进程个数。</p><h6 id="可不可以对共享内存进行多次删除shmctl？"><a href="#可不可以对共享内存进行多次删除shmctl？" class="headerlink" title="可不可以对共享内存进行多次删除shmctl？"></a>可不可以对共享内存进行多次删除shmctl？</h6><p>可以，因为shmctl标记删除共享内存，而不是直接删除。当和共享内存关联的进程数为0的时候，才被真正删除。当共享内存的key为0时表示共享内存被标记删除了。如果一个进程和共享内存取消关联，它就不能再继续操作这个共享内存，也不能重新关联。</p><h6 id="共享内存和内存映射的区别？"><a href="#共享内存和内存映射的区别？" class="headerlink" title="共享内存和内存映射的区别？"></a>共享内存和内存映射的区别？</h6><p>共享内存可以直接创建，内存映射需要磁盘文件，由于不需要内核态切换，共享内存的效率相对更高。</p><ul><li>内存方面：<ul><li>共享内存中，所有进程操作的是同一块共享内存。</li><li>内存映射中，每个进程在自己的虚拟地址空间中有一个独立的内存。</li></ul></li><li>数据安全方面：<ul><li>进程突然退出时，共享内存还在，内存映射区消失。</li><li>运行进程的电脑宕机时，数据存在共享内存中，没有了。内存映射区的数据由于磁盘文件还在，所以内存映射区的数据还存在。</li></ul></li><li>生命周期方面：<ul><li>内存映射：进程退出，内存映射区销毁</li><li>共享内存：进程退出，共享内存还在，标记删除（所有的关联的进程数为0），或者关机，如果一个进程退出，会自动和共享内存取消关联。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux服务器开发 </category>
          
          <category> Linux系统编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 进程通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程（五）进程概述</title>
      <link href="/2022/05/13/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%94%EF%BC%89%E8%BF%9B%E7%A8%8B%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/05/13/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%94%EF%BC%89%E8%BF%9B%E7%A8%8B%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/blog/0513-02.png"></p><span id="more"></span><h3 id="进程的概念和相关函数"><a href="#进程的概念和相关函数" class="headerlink" title="进程的概念和相关函数"></a>进程的概念和相关函数</h3><h4 id="进程概述"><a href="#进程概述" class="headerlink" title="进程概述"></a>进程概述</h4><p>进程是执行中的程序的实例，从操作系统内核的视角来看，进程是操作系统分配资源的基本单位。Linux中使用进程控制块PCB来描述一个进程。当程序被加载到内存中开始执行时，操作系统会为该进程分配一个PCB，记录该进程相关的信息。</p><h5 id="进程控制块的数据结构：task-struct"><a href="#进程控制块的数据结构：task-struct" class="headerlink" title="进程控制块的数据结构：task_struct"></a>进程控制块的数据结构：task_struct</h5><p>task_struct是Linux内核的一种数据结构，它被装载到RAM中担任进程控制块的作用，每个进程都把它的信息装载到task_struct结构中。task_struct结构中包含以下信息：</p><ul><li><p>标识符：与进程相关的唯一标识符，用来区别其他进程</p></li><li><p>状态：进程会有不同的状态，如运行，停止等等</p></li><li><p>优先级：相对于其他进程的优先顺序</p></li><li><p>程序计数器：程序中即将执行的下一条指令的地址</p></li><li><p>内存指针：包括程序代码和进程相关数据的是很</p></li><li><p>上下文信息：进程执行时CPU的寄存器中的数据</p></li><li><p>IO状态信息： 包括显示的I&#x2F;O请求，分配给进程的I&#x2F;O设备和正在被进程使用的文件列表。</p></li><li><p>记账信息：可能包括处理器时间总和，使用的时钟总数，时间限制，记账号等。</p></li></ul><h5 id="进程状态切换模型"><a href="#进程状态切换模型" class="headerlink" title="进程状态切换模型"></a>进程状态切换模型</h5><p>进程状态反应进程执行过程中的变化，这些状态随着进程的执行和外界条件的变化而转换。进程的状态主要有五种：新建态，就绪态，运行态，阻塞态，终止态。</p><ul><li>新建态：进程刚被创建时的状态，此时尚未进入就绪队列。</li><li>终止态：进程完成任务到达正常结束点，或出现无法克服的错误而异常终止，或被操作系统以及其他拥有终止权的进程终止时所处的状态。进程进入终止态后不再执行，但依然保留在操作系统中等待善后，直到进程被其他进程回收必要的资源后，操作系统删除该进程。</li><li>运行态：进程占有处理器正在运行。</li><li>就绪态：进程具备运行所需的全部资源，等待系统分配处理器。</li><li>阻塞态：进程缺少运行所需的资源，等待某个事件的完成而无法继续执行。</li></ul><p>进程的状态转换关系可以用下图来表述：</p><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/%E5%9B%BE%E8%A7%A3/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.png"></p><h5 id="进程相关的命令"><a href="#进程相关的命令" class="headerlink" title="进程相关的命令"></a>进程相关的命令</h5><h6 id="ps命令查看进程静态信息"><a href="#ps命令查看进程静态信息" class="headerlink" title="ps命令查看进程静态信息"></a>ps命令查看进程静态信息</h6><ul><li>a：显示终端上所有进程</li><li>u：显示进程详细信息</li><li>x：显示没有控制终端的进程</li><li>j：列出与作业控制相关的信息</li></ul><h6 id="top命令查看进程动态信息"><a href="#top命令查看进程动态信息" class="headerlink" title="top命令查看进程动态信息"></a>top命令查看进程动态信息</h6><ul><li><p>M：根据内存使用量排序</p></li><li><p>P：根据CPU占有率排序</p></li><li><p>T：根据进程运行时间长短排序</p></li><li><p>U：根据用户名筛选进程</p></li><li><p>K：输入指定PID杀死进程</p></li></ul><h6 id="kill命令杀死进程"><a href="#kill命令杀死进程" class="headerlink" title="kill命令杀死进程"></a>kill命令杀死进程</h6><p>杀死进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill pid</span><br></pre></td></tr></table></figure><p>强制杀死进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -KILL pid</span><br></pre></td></tr></table></figure><p>发送信号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -[signal_val] pid</span><br></pre></td></tr></table></figure><p>彻底杀死进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 pid</span><br></pre></td></tr></table></figure><p>显示所有可用的信号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -l</span><br></pre></td></tr></table></figure><h4 id="父进程与子进程"><a href="#父进程与子进程" class="headerlink" title="父进程与子进程"></a>父进程与子进程</h4><h5 id="fork函数创建进程"><a href="#fork函数创建进程" class="headerlink" title="fork函数创建进程"></a>fork函数创建进程</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pid_t</span> <span class="title function_">fork</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure><p>fork函数的作用是创建一个子进程，该函数会返回两次，一次在父进程中，返回创建的子进程的ID，另一次在子进程中，返回0，创建失败返回-1。因此，我们可以通过fork的返回值来判断当前进程是父进程还是子进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pid_t</span> pid = fork();</span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="comment">// 创建失败</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">// 子进程逻辑</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 父进程逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="父子进程虚拟地址空间情况"><a href="#父子进程虚拟地址空间情况" class="headerlink" title="父子进程虚拟地址空间情况"></a>父子进程虚拟地址空间情况</h5><p>fork函数的实现并非单纯的完全拷贝，而是采用写时拷贝的方法。一开始子进程和父进程是共享相同的物理地址空间的，读数据时也是共享，当发生写操作后，发生实际的拷贝操作。（读时共享，写时拷贝）这样可以减少内存复制的开销。</p><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/%E5%9B%BE%E8%A7%A3/%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B%E8%99%9A%E6%8B%9F%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4.png"></p><h5 id="父子进程的异同点"><a href="#父子进程的异同点" class="headerlink" title="父子进程的异同点"></a>父子进程的异同点</h5><h6 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h6><p>父进程从头开始执行，子进程从fork返回后开始执行。</p><p>fork函数在父进程返回子进程pid，在子进程返回0。</p><p>通过fork函数返回值不同区分父子进程。</p><p>父进程和子进程的PCB中部分信息不同。</p><h6 id="共同点："><a href="#共同点：" class="headerlink" title="共同点："></a>共同点：</h6><p>子进程刚被创建，还没有执行任何写操作时，用户区数据和文件描述符表示一样的。</p><p>进程中的变量在没执行写操作时是共享的，写操作时复制。（读时共享，写时拷贝）</p><h5 id="孤儿进程和僵尸进程"><a href="#孤儿进程和僵尸进程" class="headerlink" title="孤儿进程和僵尸进程"></a>孤儿进程和僵尸进程</h5><h6 id="孤儿进程："><a href="#孤儿进程：" class="headerlink" title="孤儿进程："></a>孤儿进程：</h6><p>父进程运行结束但是子进程仍在运行，这样的子进程为孤儿进程，每当出现孤儿进程时，内核把该孤儿进程的父进程设置为init，而init会循环的wait()它的已经退出的子进程，这样一个孤儿进程结束生命周期时，init进程就会处理其善后工作，因此孤儿进程没有什么危害。</p><h6 id="僵尸进程："><a href="#僵尸进程：" class="headerlink" title="僵尸进程："></a>僵尸进程：</h6><p>每个进程接受后都会释放自己地址空间中的用户去数据，内核区的PCB没办法自己释放，需要父进程释放。</p><p>进程终止时，父进程尚未回收，子进程残留资源（PCB）存放在内核区中，成为僵尸进程。</p><p>僵尸进程不能被kill -9杀死，这样会导致，如果父进程不调用wait()或者waitpid()的话，那么保留的那段信息不回被释放，其进程号会一直被占用，但是系统所能使用的进程号是有限的，如果僵尸进程大量产生，将可能因为没有可用的进程号而导致系统无法产生新的进程。这就是僵尸进程的危害，应当避免。</p><h4 id="进程回收"><a href="#进程回收" class="headerlink" title="进程回收"></a>进程回收</h4><h5 id="wait函数与waitpid函数"><a href="#wait函数与waitpid函数" class="headerlink" title="wait函数与waitpid函数"></a>wait函数与waitpid函数</h5><p>每个进程退出时，内核释放该进程的所有资源，包括打开的文件，占用的内存等，但是仍然为其保留一定懂得信息，这些信息主要指进程控制快PCB的信息。父进程可以通过调用wait或者waitpid函数得到它的退出状态同时彻底清除这个进程。这两个函数原型为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">wait</span><span class="params">(<span class="type">int</span> *status)</span>;</span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">waitpid</span> <span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> *status, <span class="type">int</span> options)</span>;</span><br></pre></td></tr></table></figure><p>wait()和waitpid()函数的功能一样，区别在于wait()函数会阻塞，waitpid()可以设置不阻塞，waitpid()还可以指定等待哪个子进程结束。一次wait或waitpid调用只能清理一个子进程，清理多个子进程应当使用循环。</p><h5 id="进程退出相关宏函数"><a href="#进程退出相关宏函数" class="headerlink" title="进程退出相关宏函数"></a>进程退出相关宏函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WIFEXITED(status); <span class="comment">// 非0则进程正常退出</span></span><br><span class="line">WEXITSTATUS(status); <span class="comment">// 为真则获取进程退出的状态</span></span><br><span class="line">WIFSIGNALED(status); <span class="comment">// 非0则进程异常终止</span></span><br><span class="line">WTERMSIG(status); <span class="comment">// 为真则获取使进程终止的信号编号</span></span><br><span class="line">WIFSTOPPED(status); <span class="comment">// 非0则进程处于暂停状态</span></span><br><span class="line">WSTOPSIG(status); <span class="comment">// 为真则获取使进程暂停的信号编号</span></span><br><span class="line">WIFCONTINUED(status); <span class="comment">// 非0则进程暂停后已经继续运行</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux服务器开发 </category>
          
          <category> Linux系统编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 进程 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程（四）文件操作</title>
      <link href="/2022/05/13/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/05/13/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/blog/0513-01.png"></p><span id="more"></span><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="硬链接和软链接"><a href="#硬链接和软链接" class="headerlink" title="硬链接和软链接"></a>硬链接和软链接</h4><h4 id="stat函数族"><a href="#stat函数族" class="headerlink" title="stat函数族"></a>stat函数族</h4><h5 id="Linux的stat命令"><a href="#Linux的stat命令" class="headerlink" title="Linux的stat命令"></a>Linux的stat命令</h5><p>在Linux命令行，可以使用stat命令查看一个文件的信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stat filename</span><br></pre></td></tr></table></figure><h5 id="stat函数"><a href="#stat函数" class="headerlink" title="stat函数"></a>stat函数</h5><p>stat函数是Linux系统调用函数，用来获取一个文件的信息，文件信息通过一个stat结构体变量作为传出参数返回。使用stat调用需要包含以下头文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>stat函数原型如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">stat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="keyword">struct</span> stat* statbuf)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>作用：获取一个文件的信息</li><li>参数<ul><li>pathname：文件路径</li><li>statbuf：stat结构体地址，作为传出参数</li></ul></li><li>返回值：成功返回0，失败返回-1并设置errno</li></ul><h5 id="stat结构体与st-mode变量"><a href="#stat结构体与st-mode变量" class="headerlink" title="stat结构体与st_mode变量"></a>stat结构体与st_mode变量</h5><p>stat结构体的成员变量包含文件的信息数据，在调用stat函数时通过传出参数的方式为结构体变量赋值，用户可以通过访问成员变量来获取文件特定的信息。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span>&#123;</span></span><br><span class="line">    <span class="type">dev_t</span> st_dev; <span class="comment">//文件设备编号 </span></span><br><span class="line">    <span class="type">ino_t</span> stino; <span class="comment">// 节点</span></span><br><span class="line">    <span class="type">mode_t</span> st_mode;<span class="comment">// 文件类型和存取权限</span></span><br><span class="line">    <span class="type">nlink_t</span> st_nlink; <span class="comment">//连到该文件的硬链接数目</span></span><br><span class="line">    <span class="type">uid_t</span> st_uid; <span class="comment">//用户ID</span></span><br><span class="line">    <span class="type">gid_t</span> st_gid; <span class="comment">//组ID</span></span><br><span class="line">    <span class="type">dev_t</span> st_rdev; <span class="comment">//设备文件的设备编号</span></span><br><span class="line">    <span class="type">off_t</span> st_size; <span class="comment">// 文件字节数（文件大小）</span></span><br><span class="line">    <span class="type">blksize_t</span> st_blksize; <span class="comment">//块大小</span></span><br><span class="line">    <span class="type">blkcnt_t</span> st_blocks; <span class="comment">//块数量</span></span><br><span class="line">    <span class="type">time_t</span> st_atime; <span class="comment">//最后一次访问时间</span></span><br><span class="line">    <span class="type">time_t</span> st_mtime; <span class="comment">//最后一次修改时间</span></span><br><span class="line">    <span class="type">time_t</span> st_ctime; <span class="comment">//最后一次改变时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中st_mode变量以位图存储的方式来表示文件的类型和存取权限。</p><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/%E5%9B%BE%E8%A7%A3/st_mode.png"></p><p>当用户需要判断文件具有什么权限时，让st_mode与具体的权限宏值做按位与操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st_mode &amp; S_IROTH != <span class="number">0</span></span><br></pre></td></tr></table></figure><p>当用户想要判断文件是否为哪个类型时，判断st_mode跟掩码按位与之后是否等于对应类型的宏值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(st_mode &amp; S_IFMT) == S_IFSOCK</span><br></pre></td></tr></table></figure><h5 id="文件属性操作函数"><a href="#文件属性操作函数" class="headerlink" title="文件属性操作函数"></a>文件属性操作函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">access</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* pathname, <span class="type">int</span> mode)</span>;</span><br></pre></td></tr></table></figure><ul><li>作用：判断某个文件是否有某个权限，或者判断文件是否存在。</li><li>参数：<ul><li>pathname：文件路径</li><li>mode：<ul><li>R_OK：是否有读权限</li><li>W_OK：是否有写权限</li><li>X_OK：是否有执行权限</li><li>F_OK：判断文件是否存在</li></ul></li></ul></li><li>返回值：成功0，失败-1</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">chmod</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* pathname, <span class="type">mode_t</span> mode)</span>;</span><br></pre></td></tr></table></figure><ul><li>作用：修改文件权限</li><li>参数：<ul><li>pathname：文件路径</li><li>mode：需要修改的权限值，八进制数</li></ul></li><li>返回值：成功0，失败-1</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">chown</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* pathname, <span class="type">uid_t</span> owner, <span class="type">gid_t</span> group)</span>;</span><br></pre></td></tr></table></figure><ul><li>作用：修改文件的所有者和组</li><li>参数：<ul><li>pathname：文件路径</li><li>owner：设置的文件所有者</li><li>group：设置的组</li></ul></li><li>返回值：成功0，失败-1</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">truncate</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">off_t</span> length)</span>;</span><br></pre></td></tr></table></figure><ul><li>作用：缩减或者扩展文件的尺寸至指定的大小</li><li>参数：<ul><li>path: 需要修改的文件的路径</li><li>length: 需要最终文件变成的大小</li></ul></li><li>返回值：成功返回0， 失败返回-1</li></ul><h5 id="文件目录相关函数"><a href="#文件目录相关函数" class="headerlink" title="文件目录相关函数"></a>文件目录相关函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">mkdir</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">mode_t</span> mode)</span>;</span><br></pre></td></tr></table></figure><ul><li>作用：创建一个目录</li><li>参数：<ul><li>pathname: 创建的目录的路径</li><li>mode: 权限，八进制的数</li></ul></li><li>返回值：成功返回0， 失败返回-1</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">rmdir</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname)</span>;</span><br></pre></td></tr></table></figure><ul><li>作用：删除一个目录</li><li>参数：<ul><li>pathname：目录的路径</li></ul></li><li>返回值：成功返回0，失败返回-1</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">chdir</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path)</span>;</span><br></pre></td></tr></table></figure><ul><li>作用：修改进程的工作目录</li><li>参数：<ul><li>path : 需要修改的工作目录</li></ul></li><li>返回值：成功返回0，失败返回-1</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">getcwd</span><span class="params">(<span class="type">char</span> *buf, <span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure><ul><li>作用：获取当前工作目录</li><li>参数：<ul><li>buf : 存储的路径，指向的是一个数组（传出参数）</li><li>size: 数组的大小</li></ul></li><li>返回值：返回的指向的一块内存，这个数据就是第一个参数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DIR *<span class="title function_">opendir</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span>;</span><br></pre></td></tr></table></figure><ul><li>作用：打开一个目录</li><li>参数：<ul><li>name: 需要打开的目录的名称</li></ul></li><li>返回值：<ul><li>DIR * 类型，理解为目录流，错误返回NULL</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> dirent *<span class="title function_">readdir</span><span class="params">(DIR *dirp)</span>;</span><br></pre></td></tr></table></figure><ul><li>作用：读取目录中的数据</li><li>参数：<ul><li>dirp：opendir返回的结果</li></ul></li><li>返回值：<ul><li>struct dirent：读取到的文件信息。读到末尾或失败返回NULL</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">closedir</span><span class="params">(DIR *dirp)</span>;</span><br></pre></td></tr></table></figure><ul><li>作用：关闭目录</li><li>参数：<ul><li>dirp：opendir返回的结果</li></ul></li><li>返回值：成功返回0，失败返回-1</li></ul><h5 id="dup，dup2函数"><a href="#dup，dup2函数" class="headerlink" title="dup，dup2函数"></a>dup，dup2函数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">dup</span><span class="params">(<span class="type">int</span> oldfd)</span>;</span><br></pre></td></tr></table></figure><p>dup函数的作用是复制一个新的文件描述符，它从空闲文件描述符表中选一个最小的作为新的拷贝的文件描述符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fd = open(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line"><span class="type">int</span> fd1 = dup(fd);</span><br><span class="line"><span class="comment">// fd指向文件a.txt</span></span><br><span class="line"><span class="comment">// dup执行完毕后，fd1也指向a.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">dup2</span><span class="params">(<span class="type">int</span> oldfd, <span class="type">int</span> newfd)</span>;</span><br></pre></td></tr></table></figure><p>dup2函数的作用是复制oldfd所指的文件描述符，并拷贝到newfd，若newfd为已经打开的文件描述符，则newfd所指向的文件会先被关闭，newfd和oldfd共享文件状态信息。其中oldfd必须是一个有效的文件描述符，如果oldfd和newfd相同时，相当于什么也没做。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">oldfd = open(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">newfd = open(<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">dup2(oldfd, newfd);</span><br><span class="line"><span class="comment">// oldfd指向a.txt, newfd指向b.txt</span></span><br><span class="line"><span class="comment">// dup2函数调用完毕, 指向b.txt的newfd做close, newfd再指向a.txt</span></span><br></pre></td></tr></table></figure><h5 id="fctnl函数"><a href="#fctnl函数" class="headerlink" title="fctnl函数"></a>fctnl函数</h5><p>fctnl函数的作用是对文件描述符进行特定的操作，由cmd参数来确定fcntl的具体功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd, <span class="type">long</span> arg)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd ,<span class="keyword">struct</span> flock* lock)</span>;</span><br></pre></td></tr></table></figure><p>cmd参数和对应的功能如下：</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>F_DUPED</td><td>复制文件描述符</td></tr><tr><td>F_GETFD</td><td>获取文件描述符标志</td></tr><tr><td>F_SETFD</td><td>设置文件描述符标志</td></tr><tr><td>F_GETFL</td><td>获取文件状态标志</td></tr><tr><td>F_SETFL</td><td>设置文件状态标志</td></tr><tr><td>F_GETLK</td><td>获取文件锁</td></tr><tr><td>F_SETLK</td><td>设置文件锁</td></tr><tr><td>F_SETLKW</td><td>设置文件锁，但等待返回</td></tr><tr><td>F_GETOWN</td><td>获取当前接收SIGIO和SIGURG信号的进程ID和进程组ID</td></tr><tr><td>F_SETOWN</td><td>设置当前接收SIGIO和SIGURG信号的进程ID和进程组ID</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux服务器开发 </category>
          
          <category> Linux系统编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程（三）GDB调试入门</title>
      <link href="/2022/05/11/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89GDB%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/"/>
      <url>/2022/05/11/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%89%EF%BC%89GDB%E8%B0%83%E8%AF%95%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/blog/0514-01.png"></p><span id="more"></span><h3 id="GDB调试器入门"><a href="#GDB调试器入门" class="headerlink" title="GDB调试器入门"></a>GDB调试器入门</h3><h4 id="GDB简介"><a href="#GDB简介" class="headerlink" title="GDB简介"></a>GDB简介</h4><p>GDB全称 “GNU symbolic debugger”，是Linux下常用的程序调试器，使用GDB调试器可以让程序按我们自定义的要求执行，例如在指定代码处暂停运行，查看当前的变量信息，单步调试，断点调试，设置变量等。</p><!--more--><p>通过以下命令利用包管理器安装GDB调试器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum -y install gdb</span></span><br></pre></td></tr></table></figure><p>要使用GDB调试程序，需要在编译时添加调试选项，生成可调试的可执行文件，之后才可以进行GDB调试。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ main.cpp -o app -g</span><br></pre></td></tr></table></figure><h4 id="GDB命令"><a href="#GDB命令" class="headerlink" title="GDB命令"></a>GDB命令</h4><h5 id="启动，退出，查看代码"><a href="#启动，退出，查看代码" class="headerlink" title="启动，退出，查看代码"></a>启动，退出，查看代码</h5><ul><li>启动和退出<ul><li>gdb filename</li><li>quit</li></ul></li><li>设置和获取程序执行参数<ul><li>set args 10 20</li><li>show args</li></ul></li><li>GDB使用帮助<ul><li>help</li></ul></li><li>查看当前文件代码<ul><li>list （从默认位置显示）</li><li>list line_num（从指定行显示）</li><li>list fun_name（从指定函数显示）</li></ul></li><li>查看非当前文件代码<ul><li>list filename : line_num</li><li>list filename : fun_name</li></ul></li><li>设置显示的行数<ul><li>show listsize</li><li>set listsize</li></ul></li></ul><h5 id="断点操作"><a href="#断点操作" class="headerlink" title="断点操作"></a>断点操作</h5><ul><li>设置断点<ul><li>break line_num</li><li>break fun_name</li><li>break filename : line_num</li><li>break filename : fun_name</li></ul></li><li>查看断点<ul><li>info break</li></ul></li><li>删除断点<ul><li>delete break_num</li></ul></li><li>设置断点无效<ul><li>disable break_num</li></ul></li><li>设置断点生效<ul><li>enable break_num</li></ul></li><li>设置条件断点<ul><li>break 10 if i&#x3D;&#x3D;5</li></ul></li></ul><h5 id="调试命令"><a href="#调试命令" class="headerlink" title="调试命令"></a>调试命令</h5><ul><li>运行GDB程序<ul><li>start （程序停在第一行）</li><li>run （执行到第一个断点停止）</li></ul></li><li>继续运行直到下个断点<ul><li>continue</li></ul></li><li>向下执行一行（遇到函数不会进入函数体）<ul><li>next</li></ul></li><li>变量操作<ul><li>print var_name（打印变量值）</li><li>ptype var_name（打印变量类型）</li></ul></li><li>向下单步调试（遇到函数进入函数体）<ul><li>step</li><li>finish（跳出函数体）</li></ul></li><li>自动变量操作<ul><li>display var_name（每次单步调试自动打印变量值）</li><li>info display（打印display的信息）</li><li>undisplay var_name（取消打印变量）</li></ul></li><li>其他操作<ul><li>set var var_name &#x3D; var_value（为变量设置值）</li><li>until（跳出循环）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux服务器开发 </category>
          
          <category> Linux系统编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> C++ </tag>
            
            <tag> GDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程（二）MakeFile入门</title>
      <link href="/2022/05/11/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89MakeFile%E5%85%A5%E9%97%A8/"/>
      <url>/2022/05/11/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89MakeFile%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/blog/0514-02%20%282%29.png"></p><span id="more"></span><h3 id="MakeFile的简单使用"><a href="#MakeFile的简单使用" class="headerlink" title="MakeFile的简单使用"></a>MakeFile的简单使用</h3><h4 id="什么是MakeFile？"><a href="#什么是MakeFile？" class="headerlink" title="什么是MakeFile？"></a>什么是MakeFile？</h4><p>一个工程中的源代码文件有很多，结构也很复杂，它们按照功能和模块放在若干不同的目录，如果一次次的使用gcc命令来编译是非常繁琐的。makefile制定了一系列规则，可以让用户定义哪些文件先编译，哪些文件后编译，哪些文件需要重新编译等等操作，它就像是编译工程的脚本文件。</p><!--more--><h4 id="MakeFile的要素"><a href="#MakeFile的要素" class="headerlink" title="MakeFile的要素"></a>MakeFile的要素</h4><ul><li>命名：makefile，Makefile</li><li>目标：最终要生成的文件</li><li>依赖：生成目标文件所需的文件或目标</li><li>命令：通过执行命令对依赖操作生成目标</li></ul><h4 id="MakeFile语法"><a href="#MakeFile语法" class="headerlink" title="MakeFile语法"></a>MakeFile语法</h4><h5 id="MakeFile基础语法"><a href="#MakeFile基础语法" class="headerlink" title="MakeFile基础语法"></a>MakeFile基础语法</h5><p>下面是最简单的使用，将指定的若干源文件生成可执行文件app。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">app:sub.c add.c mult.c divide.c main.c</span></span><br><span class="line">    gcc sub.c add.c mult.c divide.c main.c -o app</span><br></pre></td></tr></table></figure><h5 id="MakeFile变量"><a href="#MakeFile变量" class="headerlink" title="MakeFile变量"></a>MakeFile变量</h5><p>Makefile允许用户定义变量，语法如下。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var = value</span><br></pre></td></tr></table></figure><p>Makefile内置了一些预定义变量，下面列出几个常用的预定义变量。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">AR: 归档维护程序的名称，默认 ar</span></span><br><span class="line"><span class="section">CC: C编译器的名称，默认 cc</span></span><br><span class="line"><span class="section">CXX: C++编译器名称，默认g++</span></span><br><span class="line"><span class="variable">$@</span>:目标的完整名称</span><br><span class="line"><span class="variable">$&lt;</span>：第一个依赖文件的名称</span><br><span class="line"><span class="variable">$^</span>: 所有的依赖文件</span><br><span class="line">$(变量名)：获取变量值</span><br></pre></td></tr></table></figure><h5 id="MakeFile函数"><a href="#MakeFile函数" class="headerlink" title="MakeFile函数"></a>MakeFile函数</h5><p>获取指定目录下指定类型的文件列表</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前目录以及./sub/目录下的.c文件</span></span><br><span class="line"><span class="variable">$(<span class="built_in">wildcard</span> *.c ./sub/*.c)</span></span><br></pre></td></tr></table></figure><p>模式字符串替换</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将x.c bar.c fuck.c替换为.o</span></span><br><span class="line"><span class="variable">$(<span class="built_in">patsubst</span> %.c, %.o, x.c bar.c fuck.c)</span></span><br></pre></td></tr></table></figure><p>删除文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除掉不需要的.o文件</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm <span class="variable">$(objs)</span> -f</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux服务器开发 </category>
          
          <category> Linux系统编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> C++ </tag>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统编程（一）GCC工作流程</title>
      <link href="/2022/05/11/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89GCC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/05/11/Linux%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89GCC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/blog/0514-08.png"></p><span id="more"></span><h3 id="GCC工作流程"><a href="#GCC工作流程" class="headerlink" title="GCC工作流程"></a>GCC工作流程</h3><h4 id="一、预处理（Preprocessing）"><a href="#一、预处理（Preprocessing）" class="headerlink" title="一、预处理（Preprocessing）"></a>一、预处理（Preprocessing）</h4><p>预处理器对源代码进行预处理操作，将头文件展开，处理注释，替换宏定义等。预处理后的源代码文件以 <strong>.i</strong> 结尾。</p><h4 id="二、编译（Compilation）"><a href="#二、编译（Compilation）" class="headerlink" title="二、编译（Compilation）"></a>二、编译（Compilation）</h4><p>编译器将预处理后的源代码进行词法，句法，语义分析，以及优化源代码等编译流程，生成以 <strong>.s</strong> 结尾的汇编代码。</p><!--more--><h4 id="三、汇编（Assembly）"><a href="#三、汇编（Assembly）" class="headerlink" title="三、汇编（Assembly）"></a>三、汇编（Assembly）</h4><p>汇编代码通过汇编器生成目标二进制机器码，以 <strong>.o</strong> 结尾。</p><h4 id="四、链接"><a href="#四、链接" class="headerlink" title="四、链接"></a>四、链接</h4><p>一个项目通常不只有用户编写的源代码，还有其他目标代码，库代码等，链接器将这些代码进行链接生成最终的可执行程序。</p><p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/%E5%9B%BE%E8%A7%A3/gcc%E7%BC%96%E8%AF%91%E6%B5%81%E7%A8%8B.png"></p><center>图1 gcc工作流程</center><h3 id="gcc编译常用参数"><a href="#gcc编译常用参数" class="headerlink" title="gcc编译常用参数"></a>gcc编译常用参数</h3><ul><li>-E：预处理指定的源文件，不编译</li><li>-S：编译指定源文件，不汇编</li><li>-c：编译，汇编指定的源文件，不链接</li><li>file1 -o file2：将file1编译成可执行文件file2</li><li>-I directory：指定include包含文件的搜索目录</li><li>-g：编译时生成调试信息</li><li>-D：编译时指定一个宏</li><li>-w：不生成警告信息</li><li>-l：指定使用的库</li><li>-fpic：生成与位置无关的代码</li><li>-shared：生成共享目标文件</li></ul><h3 id="静态库"><a href="#静态库" class="headerlink" title="静态库"></a>静态库</h3><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><h5 id="Linux：libxxx-a"><a href="#Linux：libxxx-a" class="headerlink" title="Linux：libxxx.a"></a>Linux：libxxx.a</h5><ul><li>lib：前缀</li><li>xxx：库名称</li><li>.a：后缀</li></ul><h5 id="Windows：libxxx-lib"><a href="#Windows：libxxx-lib" class="headerlink" title="Windows：libxxx.lib"></a>Windows：libxxx.lib</h5><h4 id="静态库制作"><a href="#静态库制作" class="headerlink" title="静态库制作"></a>静态库制作</h4><ol><li>gcc获得 .o 文件</li><li>将 .o 文件打包，使用ar工具（archive）</li><li>gcc -c xxx1.c xxx2.c …… xxxn.c</li><li>ar rcs libxxx.a xxx1.o xxx2.o ……. xxxn.o</li></ol><h3 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h3><h4 id="命名规则-1"><a href="#命名规则-1" class="headerlink" title="命名规则"></a>命名规则</h4><h5 id="Linux：libxxx-so"><a href="#Linux：libxxx-so" class="headerlink" title="Linux：libxxx.so"></a>Linux：libxxx.so</h5><ul><li>lib：前缀</li><li>xxx：库名称</li><li>.so：后缀</li></ul><h5 id="Windows：libxxx-dll"><a href="#Windows：libxxx-dll" class="headerlink" title="Windows：libxxx.dll"></a>Windows：libxxx.dll</h5><h4 id="动态库制作"><a href="#动态库制作" class="headerlink" title="动态库制作"></a>动态库制作</h4><ol><li><p>gcc得到 .o 文件， 得到和位置无关的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -fpic a.c b.c</span><br></pre></td></tr></table></figure></li><li><p>gcc得到动态库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared a.o b.o -o libcalc.so</span><br></pre></td></tr></table></figure></li><li><p>添加动态库绝对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久添加，在/etc/profile文件末尾添加下行，然后<span class="built_in">source</span> /etc/profile</span></span><br><span class="line">export LD_LIARARY_PATH=$LD_LIBRARY_PATH:/mypath</span><br><span class="line">echo $LD_LIARARY_PATH</span><br></pre></td></tr></table></figure><h3 id="静态库和动态库对比"><a href="#静态库和动态库对比" class="headerlink" title="静态库和动态库对比"></a>静态库和动态库对比</h3><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><ul><li>静态库：GCC链接时将静态库的代码打包到可执行程序中。</li><li>动态库：GCC链接时不会打包到可执行程序中。</li><li>程序启动后，动态库会被动态加载到内存，通过ldd（list dynamic dependencies）命令检查动态库的依赖关系。</li></ul><h4 id="静态库的特点"><a href="#静态库的特点" class="headerlink" title="静态库的特点"></a>静态库的特点</h4><h5 id="静态库优点："><a href="#静态库优点：" class="headerlink" title="静态库优点："></a>静态库优点：</h5><p>静态库打包到程序中，加载快。</p><p>发布程序无需提供静态库，好移植。</p><h5 id="静态库缺点："><a href="#静态库缺点：" class="headerlink" title="静态库缺点："></a>静态库缺点：</h5><p>消耗系统资源，浪费内存。</p><p>更新部署和发布比较麻烦。</p><h4 id="动态库的特点："><a href="#动态库的特点：" class="headerlink" title="动态库的特点："></a>动态库的特点：</h4><h5 id="动态库优点："><a href="#动态库优点：" class="headerlink" title="动态库优点："></a>动态库优点：</h5><p>可以实现进程间资源共享（共享库）。</p><p>更新部署发布简单。</p><p>可以控制动态库加载的时机。</p><h5 id="动态库缺点："><a href="#动态库缺点：" class="headerlink" title="动态库缺点："></a>动态库缺点：</h5><p>加载速度较慢。</p><p>发布程序时需要提供依赖的动态库。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Linux服务器开发 </category>
          
          <category> Linux系统编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2022/05/11/%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/05/11/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/05/11/%E6%B5%8B%E8%AF%95/heisi.jpg" alt="heisi"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何在hexo上创建一篇文章</title>
      <link href="/2022/05/11/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2022/05/11/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://blog-image-1304227503.cos.ap-nanjing.myqcloud.com/img/blog/0514-03%20%282%29.png"></p><span id="more"></span><h4 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h4><p>使用命令新建文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>new：文章创建命令</p><p>layout：文章布局，默认post，可以不填</p><p>title：文章标题兼文件名</p><!--more--><p>文件存储路径为：source&#x2F;_posts</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;如何在hexo上创建一篇文章&quot;</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: ~\Desktop\Programing\notes\MyBlog\source\_posts\如何在hexo上创建一篇文章.md</span><br></pre></td></tr></table></figure><p>如上使用命令创建一篇名为“如何在hexo上创建一篇文章”的文章</p><h4 id="Front-matter设置"><a href="#Front-matter设置" class="headerlink" title="Front-matter设置"></a>Front-matter设置</h4><p>Front-matter是指定文章属性变量的一块区域</p><p>下表为一些预定义的参数</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td>无</td></tr><tr><td>title</td><td>标题</td><td>无</td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启评论</td><td>true</td></tr><tr><td>tags</td><td>标签</td><td></td></tr><tr><td>categories</td><td>分类</td><td></td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td>无</td></tr></tbody></table><p>设置好开头的变量以后便可以使用typora等编辑器编写文章，写好的文章通过命令部署后即可完成上传。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/10/hello-world/"/>
      <url>/2022/05/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><span id="more"></span><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客使用 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
